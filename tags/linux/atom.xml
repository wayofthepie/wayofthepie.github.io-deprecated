<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title> - linux</title>
	<subtitle>Software Pie</subtitle>
	<link href="https://wayofthepie.github.io/tags/linux/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://wayofthepie.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2021-02-28T00:00:00+00:00</updated>
	<id>https://wayofthepie.github.io/tags/linux/atom.xml</id>
	<entry xml:lang="en">
		<title>Processes, Threads and the Clone Syscall</title>
		<published>2021-02-28T00:00:00+00:00</published>
		<updated>2021-02-28T00:00:00+00:00</updated>
		<link href="https://wayofthepie.github.io/linux/linux-procs-and-threads/" type="text/html"/>
		<id>https://wayofthepie.github.io/linux/linux-procs-and-threads/</id>
		<content type="html">&lt;p&gt;I want to explore how threads and processes work on Linux, under the hood, as in-depth as I can. It&#x27;s been a while since I dove into the kernel. In this series of posts, I&#x27;ll be writing some potentially insane C code to dive into this.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;with-pthread&quot;&gt;With pthread&lt;&#x2F;h1&gt;
&lt;p&gt;Normally if you want a thread in C you&#x27;d use the &lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man7&#x2F;pthreads.7.html&quot;&gt;pthreads&lt;&#x2F;a&gt; (POSIX threads) API. Quick example with &lt;code&gt;pthreads&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pthread.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdlib.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unistd.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;work&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
  pthread_t ptid;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pthread_create&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;ptid, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &amp;amp;work, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;I launched a thread!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pthread_join&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ptid, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pthread_exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;work&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pthread_detach&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pthread_self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Look ma! I&amp;#39;m a thread!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pthread_exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Compile and run, and you will get the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ gcc -pthread -o pthread_thread.o pthread_thread.c

$ .&#x2F;pthread_thread.o
I launched a thread!
Look ma! I&amp;#39;m a thread!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The order of the prints will depend on which thread got to print first. Note too that &lt;code&gt;printf&lt;&#x2F;code&gt; is threadsafe when used within the context of &lt;code&gt;glibc&lt;&#x2F;code&gt;, more on that later. This seems pretty straightforward. How would we do it without using &lt;code&gt;pthreads&lt;&#x2F;code&gt;? &lt;&#x2F;p&gt;
&lt;h1 id=&quot;without-pthread&quot;&gt;Without pthread&lt;&#x2F;h1&gt;
&lt;p&gt;Note the following will &lt;em&gt;not&lt;&#x2F;em&gt; be equivalent to the &lt;code&gt;pthread&lt;&#x2F;code&gt; call above. That does a lot more setup to make using the thread easier and safer than what we are going to see in this section. With that said - the &lt;code&gt;clone&lt;&#x2F;code&gt; syscall on Linux allows the creation of threads. This can be called directly or through &lt;code&gt;libc&lt;&#x2F;code&gt;. Let&#x27;s do the latter. The signature for &lt;code&gt;clone&lt;&#x2F;code&gt; in libc looks as follows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;clone &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(*fn)(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*arg), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;child_stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
	      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;arg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, ... &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* pid_t *parent_tid, void *tls, pid_t *child_tid);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;int (*fn)(void *arg)&lt;&#x2F;code&gt; is a pointer to a function that will do the work in the thread, &lt;code&gt;void *child_stack&lt;&#x2F;code&gt; is a pointer to the top of the stack for the thread, &lt;code&gt;int flags&lt;&#x2F;code&gt; are the flags for this &lt;code&gt;clone&lt;&#x2F;code&gt; call (more on those later), and &lt;code&gt;void *arg&lt;&#x2F;code&gt; is a pointer to an argument to pass to this thread. &lt;&#x2F;p&gt;
&lt;p&gt;The rest of the arguments, defined with var args (&lt;code&gt;...&lt;&#x2F;code&gt;) we are not going to use. But they are the parent thread ID, pointer to thread local storage for this new thread, and the child&#x27;s thread ID. &lt;code&gt;clone&lt;&#x2F;code&gt; will return  &lt;code&gt;-1&lt;&#x2F;code&gt; on error.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;clone-a-thread&quot;&gt;Clone a Thread&lt;&#x2F;h2&gt;
&lt;p&gt;First, what should our thread do? Let&#x27;s just make it print something and then sleep for a bit.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We need to define this so we can call clone later.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#define &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;_GNU_SOURCE

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We dont need all these headers just for thread_work, but  will need them later.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sched.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdio.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdlib.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;string.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sys&#x2F;mman.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;unistd.h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;thread_work&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; SIZE = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; buf[SIZE];
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;strcpy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(buf, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;running thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fileno&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(stdout), buf, SIZE);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;strcpy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(buf, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;finished thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fileno&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(stdout), buf, SIZE);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All this does is print &amp;quot;running thread&amp;quot; and sleeps for 10 seconds. We can&#x27;t use printf here, it&#x27;s not thread safe if not used with a thread created with &lt;code&gt;pthread_create&lt;&#x2F;code&gt;. More on why later.&lt;&#x2F;p&gt;
&lt;p&gt;For now, what&#x27;s next? Well, we need to set up some stack space for the thread. Let&#x27;s create a function for that.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;alloc_stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stack_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*stack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mmap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, stack_size, PROT_READ | PROT_WRITE,
                     MAP_PRIVATE | MAP_ANONYMOUS | MAP_STACK, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(stack == MAP_FAILED) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failed to allocate stack for thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
  }
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; stack;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is a bit going on here! We call &lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man2&#x2F;mmap.2.html&quot;&gt;mmap&lt;&#x2F;a&gt; to allocate memory for the stack. Let&#x27;s break it down.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mmap&quot;&gt;mmap&lt;&#x2F;h2&gt;
&lt;p&gt;The signature for &lt;code&gt;mmap&lt;&#x2F;code&gt; is:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mmap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;addr&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, size_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;length&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prot&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;flags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, off_t &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;offset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;void *addr&lt;&#x2F;code&gt; is a hint to the kernel about where it should place the mapping. &lt;code&gt;size_t lngth&lt;&#x2F;code&gt; is the length of the mapping. &lt;code&gt;int prot&lt;&#x2F;code&gt; defines the memory protection that should be applied. &lt;code&gt;int flags&lt;&#x2F;code&gt; allows passing a number of flags that determine how this mapping functions, more on that in a moment. &lt;code&gt;int fd&lt;&#x2F;code&gt; is a file descriptor, &lt;code&gt;mmap&lt;&#x2F;code&gt; can be used to memory map a file, this is ignored depending on what flags are passed. Finally, &lt;code&gt;off_t offset&lt;&#x2F;code&gt; the offset of the file to start mapping, if &lt;code&gt;mmap&lt;&#x2F;code&gt; is memory mapping a file.&lt;&#x2F;p&gt;
&lt;p&gt;We pass &lt;code&gt;PROT_READ | PROT_WRITE&lt;&#x2F;code&gt; as the value for &lt;code&gt;prot&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;PROT_READ&lt;&#x2F;code&gt; allows pages in the mapping to be read.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;PROT_WRITE&lt;&#x2F;code&gt; allows pages in the mapping to be written to.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;For &lt;code&gt;flags&lt;&#x2F;code&gt; we pass &lt;code&gt;MAP_PRIVATE | MAP_ANONYMOUS | MAP_STACK&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MAP_PRIVATE&lt;&#x2F;code&gt; marks the memory region created by this mapping as private, so no other &lt;em&gt;process&lt;&#x2F;em&gt; can see it. &lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;MAP_ANONYMOUS&lt;&#x2F;code&gt; means this region is not backed by a file, and the &lt;code&gt;fd&lt;&#x2F;code&gt; argument to &lt;code&gt;mmap&lt;&#x2F;code&gt; is ignored.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;MAP_STACK&lt;&#x2F;code&gt; this is a no-op on Linux, currently anyway. This is an interesting one, I could have ignored this here, but it is recommened to add it. I&#x27;ve dedicated &lt;a href=&quot;https:&#x2F;&#x2F;wayofthepie.github.io&#x2F;linux&#x2F;linux-procs-and-threads&#x2F;#mmap-and-map-stack&quot;&gt;a section later in this post&lt;&#x2F;a&gt; specifically for this.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Hopefully that makes sense. &lt;code&gt;mmap&lt;&#x2F;code&gt; will return &lt;code&gt;MAP_FAILED&lt;&#x2F;code&gt; if it fails to allocate or the address of the mapping. So &lt;code&gt;alloc_stack&lt;&#x2F;code&gt; checks for &lt;code&gt;MAP_FAILED&lt;&#x2F;code&gt;, log an error with &lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man3&#x2F;perror.3.html&quot;&gt;perror&lt;&#x2F;a&gt; if it does, and exit. &lt;code&gt;perror&lt;&#x2F;code&gt; will log our message along with a translation of the &lt;code&gt;errno&lt;&#x2F;code&gt; value &lt;code&gt;mmap&lt;&#x2F;code&gt; sets.&lt;&#x2F;p&gt;
&lt;p&gt;If &lt;code&gt;mmap&lt;&#x2F;code&gt; succeeds, &lt;code&gt;alloc_stack&lt;&#x2F;code&gt; returns a pointer to the stack.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;time-to-clone&quot;&gt;Time to Clone&lt;&#x2F;h1&gt;
&lt;p&gt;Now we have a function to allocate a stack and a function that defines the work our thread should do. Time to &lt;code&gt;clone&lt;&#x2F;code&gt;, lets just do it in &lt;code&gt;main&lt;&#x2F;code&gt;. First up, allocate the stack.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; STACK_SIZE = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;65536&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*stack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alloc_stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(STACK_SIZE);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*stack_top = stack + STACK_SIZE;

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We compute the value at the top of the stack, &lt;code&gt;stack_top&lt;&#x2F;code&gt;, as &lt;code&gt;clone&lt;&#x2F;code&gt; needs this as an argument. Now we can clone:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; STACK_SIZE = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;65536&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*stack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alloc_stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(STACK_SIZE);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*stack_top = stack + STACK_SIZE;

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;starting thread...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(thread_work, stack_top, CLONE_THREAD | CLONE_SIGHAND | CLONE_VM,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) == -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error cloning&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
  }

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We call &lt;code&gt;clone&lt;&#x2F;code&gt; with &lt;code&gt;thread_work&lt;&#x2F;code&gt;, the function we defined earlier, a pointer to the top of the stack, flags to tell clone what we want to do, and &lt;code&gt;NULL&lt;&#x2F;code&gt; for the argument. &lt;code&gt;clone&lt;&#x2F;code&gt; has a lot of functionality which is chosen through the flags passed to it.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CLONE_THREAD&lt;&#x2F;code&gt; says to put the child thread into the same thread group as the calling process.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;CLONE_SIGHAND&lt;&#x2F;code&gt; is required when using &lt;code&gt;CLONE_THREAD&lt;&#x2F;code&gt;. This makes the child and the parent share the same signal handlers.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;CLONE_VM&lt;&#x2F;code&gt; is required when using &lt;code&gt;CLONE_SIGHAND&lt;&#x2F;code&gt;. This makes the calling process and the child share the same memory space.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;These three flags together make the child which &lt;code&gt;clone&lt;&#x2F;code&gt; creates a thread of the calling process. If we passed different flags, we could spawn a new process, instead of a thread, that does not share memory with the calling process.&lt;&#x2F;p&gt;
&lt;p&gt;Compile and run, and you should get the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ gcc -o clone_thread.o clone_thread.c

$ .&#x2F;clone_thread.o
starting thread...
running thread
finished thread
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great! I mentioned this is not equivalent to &lt;code&gt;pthread_create&lt;&#x2F;code&gt;. One difference is that &lt;code&gt;pthread_create&lt;&#x2F;code&gt; will set a lot more flags. Here is an excerpt from the libc source on thread creation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* We rely heavily on various flags the CLONE function understands:

     CLONE_VM, CLONE_FS, CLONE_FILES
	These flags select semantics with shared address space and
	file descriptors according to what POSIX requires.

     CLONE_SIGHAND, CLONE_THREAD
	This flag selects the POSIX signal semantics and various
	other kinds of sharing (itimers, POSIX timers, etc.).

     CLONE_SETTLS
	The sixth parameter to CLONE determines the TLS area for the
	new thread.

     CLONE_PARENT_SETTID
	The kernels writes the thread ID of the newly created thread
	into the location pointed to by the fifth parameters to CLONE.

	Note that it would be semantically equivalent to use
	CLONE_CHILD_SETTID but it is be more expensive in the kernel.

     CLONE_CHILD_CLEARTID
	The kernels clears the thread ID of a thread that has called
	sys_exit() in the location pointed to by the seventh parameter
	to CLONE.

     The termination signal is chosen to be zero which means no signal
     is sent.  *&#x2F;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; clone_flags = (CLONE_VM | CLONE_FS | CLONE_FILES | CLONE_SYSVSEM
			   | CLONE_SIGHAND | CLONE_THREAD
			   | CLONE_SETTLS | CLONE_PARENT_SETTID
			   | CLONE_CHILD_CLEARTID
			   | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can see the source &lt;a href=&quot;https:&#x2F;&#x2F;sourceware.org&#x2F;git&#x2F;?p=glibc.git;a=blob;f=sysdeps&#x2F;unix&#x2F;sysv&#x2F;linux&#x2F;createthread.c;h=bc3409b32648e901d931f67ff1869597473d1250;hb=HEAD#l67&quot;&gt;here&lt;&#x2F;a&gt;. The actual calls from the &lt;code&gt;pthread_create&lt;&#x2F;code&gt; function to that function are through an insane chain of macros, it&#x27;s not easy to see the call chain at all!&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, we know how to spawn a thread with &lt;code&gt;clone&lt;&#x2F;code&gt; in libc now. In the next post, I&#x27;m going to try to do this with the &lt;code&gt;clone&lt;&#x2F;code&gt; syscall directly.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;mmap-and-map-stack&quot;&gt;mmap and MAP_STACK&lt;&#x2F;h1&gt;
&lt;p&gt;In the &lt;a href=&quot;https:&#x2F;&#x2F;wayofthepie.github.io&#x2F;linux&#x2F;linux-procs-and-threads&#x2F;#mmap&quot;&gt;mmap&lt;&#x2F;a&gt; section I mentioned we could have just ignored this flag, at least for this post. But, I was super curious why it even existed after reading the &lt;a href=&quot;https:&#x2F;&#x2F;man7.org&#x2F;linux&#x2F;man-pages&#x2F;man2&#x2F;clone.2.html&quot;&gt;man page description&lt;&#x2F;a&gt; which says:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;MAP_STACK (since Linux 2.6.27) &lt;&#x2F;p&gt;
&lt;p&gt;Allocate the mapping at an address suitable for a process or thread stack.&lt;&#x2F;p&gt;
&lt;p&gt;This flag is currently a no-op on Linux.  However, by employing this flag, applications can ensure  that  they  transparently
obtain support if the flag is implemented in the future.  Thus, it is used in the glibc threading implementation to allow for
the fact that some architectures may (later) require special treatment for stack allocations.  A  further  reason  to  employ
this flag is portability: MAP_STACK exists (and has an effect) on some other systems (e.g., some of the BSDs).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Further down that man page it talks about why you should use &lt;code&gt;mmap&lt;&#x2F;code&gt; over &lt;code&gt;malloc&lt;&#x2F;code&gt; for allocating stack memory:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;We can specify the MAP_STACK flag to request a mapping that is
suitable for a stack.  For the moment, this flag is a no-op on
Linux, but it exists and has effect on some other systems, so
we should include it for portability.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Besides the man pages, you can read a bit more about MAP_STACK in this thread &lt;a href=&quot;https:&#x2F;&#x2F;lkml.org&#x2F;lkml&#x2F;2019&#x2F;11&#x2F;11&#x2F;135&quot;&gt;https:&#x2F;&#x2F;lkml.org&#x2F;lkml&#x2F;2019&#x2F;11&#x2F;11&#x2F;135&lt;&#x2F;a&gt;, which mentions why this should be added:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;So, my understanding from the above is that MAP_STACK was added to 
allow a possible fix on some old architectures, should anyone decide it
was worth doing the work of implementing it. But so far, after 12 years,
no one did. It kind of looks like no one ever will (since those old
architectures become less and less relevant).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Computers are hard.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;thread-safety-of-printf&quot;&gt;Thread Safety of printf&lt;&#x2F;h1&gt;
&lt;p&gt;I never really thought about it until writing this post, but &lt;code&gt;printf&lt;&#x2F;code&gt; is only threadsafe in the context of libc. Here is what I originally tried to write when building the initial &lt;code&gt;clone&lt;&#x2F;code&gt; example.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;thread_work&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;running thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;finished thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;alloc_stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stack_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*stack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mmap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, stack_size, PROT_READ | PROT_WRITE,
                     MAP_PRIVATE | MAP_ANONYMOUS | MAP_STACK, -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(stack == MAP_FAILED) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;failed to allocate stack for thread&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
  }
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; stack;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argc&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;**&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;argv&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; STACK_SIZE = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;65536&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*stack = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;alloc_stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(STACK_SIZE);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;char &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;*stack_top = stack + STACK_SIZE;

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(thread_work, stack_top, CLONE_THREAD | CLONE_SIGHAND | CLONE_VM,
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;NULL&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) == -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;perror&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;error cloning&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
  }

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;printf&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;started thread...&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sleep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);

  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you compile and run this (hint, you shouldn&#x27;t 😄), you might get something like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ gcc -o clone_thread.o clone_thread.c

$ .&#x2F;clone_thread.o
�U.
running thread
finished thread
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Uh oh! It may segfault too. Or do who knows what, it&#x27;s undefined behaviour! This baffled me for a bit. It seems when calling &lt;code&gt;pthread_create&lt;&#x2F;code&gt; libc will setup some bookkeeping, perhaps setting up thread local storage for the buffer in &lt;code&gt;printf&lt;&#x2F;code&gt; 🤔. I&#x27;m not entirely sure yet. There are some posts on the interweb about this. &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;38492299&#x2F;1906866&quot;&gt;This stackoverflow&lt;&#x2F;a&gt; answer, and the one above it, comes to the same conclusion. &lt;a href=&quot;https:&#x2F;&#x2F;sourceware.org&#x2F;bugzilla&#x2F;show_bug.cgi?id=10311#c6&quot;&gt;This thread&lt;&#x2F;a&gt; for a related bug on sourceware talks about it too.&lt;&#x2F;p&gt;
&lt;p&gt;It makes sense. I&#x27;m going to dive more into glibc, to get a better understanding of what it&#x27;s doing when it spawns a thread with &lt;code&gt;pthread_create&lt;&#x2F;code&gt;. I just need to build up the energy to wade through crazy macros first 😬.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;I covered the basic way threads can be created on linux using &lt;code&gt;clone&lt;&#x2F;code&gt; through &lt;code&gt;libc&lt;&#x2F;code&gt;. It&#x27;s a lot simpler than &lt;code&gt;pthreads&lt;&#x2F;code&gt; for sure! But it does make &lt;code&gt;printf&lt;&#x2F;code&gt; (and possibly other parts of libc!) unsafe to use in child threads. But hopefully this gave you a better understanding of what is happening under the hood. In the next post I want to drop a level lower, and &lt;code&gt;clone&lt;&#x2F;code&gt; a thread by calling the &lt;code&gt;clone&lt;&#x2F;code&gt; syscall directly, without libc. Either that or dive more into the &lt;code&gt;printf&lt;&#x2F;code&gt; issue and see how glibc sets up threads. &lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Morning silence and broken drivers</title>
		<published>2020-06-14T00:00:00+00:00</published>
		<updated>2020-06-14T00:00:00+00:00</updated>
		<link href="https://wayofthepie.github.io/linux/morning-silence/" type="text/html"/>
		<id>https://wayofthepie.github.io/linux/morning-silence/</id>
		<content type="html">&lt;p&gt;I woke up this morning and booted my desktop. No sound! Some digging around and I noticed &lt;code&gt;dmesg&lt;&#x2F;code&gt; spitting out an error. I don&#x27;t have that message saved but here are the details from the kernel logs.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;div class=&quot;alert alert-info&quot;&gt;
&lt;span&gt;&lt;i class=&quot;icon fas fa-info-circle&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;alert-text&quot;&gt;
  &lt;p&gt;
  Originally posted on &lt;a href=&quot;https:&#x2F;&#x2F;dev.to&quot;&gt;dev.to&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;wayofthepie&#x2F;morning-silence-and-broken-drivers-2d3b&quot;&gt;here&lt;&#x2F;a&gt;.
  &lt;&#x2F;p&gt;
&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;✦&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ➜ journalctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --system --since&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; yesterday | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Focusrite Scarlett&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -C10
...
Jun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 14 06:45:59 sky kernel: usb 1-1.2.3: USB disconnect, device number 8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Jun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 14 06:46:00 sky kernel: usb 1-1.2.3: new high-speed USB device number 9 using ehci-pci
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Jun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 14 06:46:00 sky kernel: usb 1-1.2.3: New USB device found, idVendor=1235, idProduct=8203, bcdDevice= 6.2f
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Jun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 14 06:46:00 sky kernel: usb 1-1.2.3: New USB device strings: Mfr=1, Product=3, SerialNumber=2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Jun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 14 06:46:00 sky kernel: usb 1-1.2.3: Product: Scarlett 6i6 USB
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Jun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 14 06:46:00 sky kernel: usb 1-1.2.3: Manufacturer: Focusrite
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Jun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 14 06:46:00 sky kernel: usb 1-1.2.3: SerialNumber: 00009810
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Jun&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 14 06:46:00 sky kernel: usb 1-1.2.3: Focusrite Scarlett Gen 2 Mixer Driver disabled; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; options snd_usb_audio device_setup=1 to enable and report any issues to g@b4.v
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It looks like a driver update in the latest kernel broke my USB audio device, a pretty old Focusrite Scarlett. A quick google of the error brings you to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;geoffreybennett&#x2F;scarlett-gen2&#x2F;releases&quot;&gt;these release notes&lt;&#x2F;a&gt;. This is a fork of the kernel where the Focusrite Scarlett driver development happens. They mention adding one of the following lines to &lt;code&gt;&#x2F;etc&#x2F;modprobe.d&#x2F;scarlett.conf&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;options snd_usb_audio device_setup=1,1,1,1
options snd_usb_audio vid=0x1235 pid=0x8212 device_setup=1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great! I&#x27;m not sure what &lt;code&gt;vid&lt;&#x2F;code&gt; and &lt;code&gt;pid&lt;&#x2F;code&gt; are. However, if you look back up at the kernel logs there is a line that looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;New USB device found, idVendor=1235, idProduct=8203, bcdDevice= 6.2f
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;vid&lt;&#x2F;code&gt; is probably the Vendor ID and &lt;code&gt;pid&lt;&#x2F;code&gt; product ID. I had a quick look at the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;geoffreybennett&#x2F;scarlett-gen2&#x2F;commit&#x2F;63693795498192ca1142aca4a829a1276a1c76b9&quot;&gt;commit for that release&lt;&#x2F;a&gt; and that clarified it. There are a number of constants defined in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;geoffreybennett&#x2F;scarlett-gen2&#x2F;blob&#x2F;63693795498192ca1142aca4a829a1276a1c76b9&#x2F;sound&#x2F;usb&#x2F;mixer_quirks.c&quot;&gt;sound&#x2F;usb&#x2F;mixer_quirks.c&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;USB_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x1235&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x8203&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Focusrite Scarlett 6i6 2nd Gen *&#x2F;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;USB_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x1235&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x8204&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Focusrite Scarlett 18i8 2nd Gen *&#x2F;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;USB_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x1235&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x8201&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Focusrite Scarlett 18i20 2nd Gen *&#x2F;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;USB_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x1235&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x8212&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Focusrite Scarlett 4i4 3rd Gen *&#x2F;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;case &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;USB_ID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x1235&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0x8213&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;): &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;* Focusrite Scarlett 8i6 3rd Gen *&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The kernel logs have &lt;code&gt;idProduct=8203&lt;&#x2F;code&gt;, this matches the constant with the comment for the &lt;code&gt;Focusrite Scarlett 6i6 2nd Gen&lt;&#x2F;code&gt;, which is the device I have. Great, so now we know what &lt;code&gt;vid&lt;&#x2F;code&gt; and &lt;code&gt;pid&lt;&#x2F;code&gt; should be. Add this to &lt;code&gt;&#x2F;etc&#x2F;modprobe.d&#x2F;scarlett.conf&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;options snd_usb_audio vid=0x1235 pid=0x8203 device_setup=1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run &lt;code&gt;sudo systemctl restart systemd-modules-load.service&lt;&#x2F;code&gt; to reload the kernel modules. Check they are loaded:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;✦&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ➜ modprobe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; snd_usb_audio | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; options
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;options&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; snd_usb_audio vid=0x1235 pid=0x8203 device_setup=1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Still no sound... &lt;&#x2F;p&gt;
&lt;h1 id=&quot;still-silence&quot;&gt;Still silence&lt;&#x2F;h1&gt;
&lt;p&gt;Now what?  Some more googling around brought me to &lt;a href=&quot;https:&#x2F;&#x2F;linuxmusicians.com&#x2F;viewtopic.php?f=6&amp;amp;t=19975&amp;amp;start=30&quot;&gt;this forum thread&lt;&#x2F;a&gt;. There is some discussion about the issue there, luckily the author of the driver is also posting! In one of the comments they mention:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please upgrade to 5.4.1 first; there are known issues with the 6i6 support in 5.4.0 and it won&#x27;t work very well even after you enable it.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;What version of the kernel am I on?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; uname&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -r
5.4.0-37-generic
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ah! A likely suspect. Let&#x27;s compile a custom kernel, say the latest 5.4.x kernel. It&#x27;s been a while since I&#x27;ve done this. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; wget https:&#x2F;&#x2F;cdn.kernel.org&#x2F;pub&#x2F;linux&#x2F;kernel&#x2F;v5.x&#x2F;linux-5.4.46.tar.xz

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; wget https:&#x2F;&#x2F;cdn.kernel.org&#x2F;pub&#x2F;linux&#x2F;kernel&#x2F;v5.x&#x2F;linux-5.4.46.tar.sign

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; unxz linux-5.4.46.tar.xz

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# I haven&amp;#39;t stored the public keys for linus&#x2F;greg on this machine yet
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;➜ gpg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --locate-keys&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; torvalds@kernel.org gregkh@kernel.org
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; WARNING: unacceptable HTTP redirect from server was cleaned up
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; key 38DBBDC86092693E: public key &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Greg Kroah-Hartman &amp;lt;gregkh@kernel.org&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; imported
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; Total number processed: 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;               imported: 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; WARNING: unacceptable HTTP redirect from server was cleaned up
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; key 79BE3E4300411886: public key &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Linus Torvalds &amp;lt;torvalds@kernel.org&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; imported
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; Total number processed: 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;               imported: 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   rsa4096 2011-09-23 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;SC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;647F28654894E3BD457199BE38DBBDC86092693E
uid           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; unknown&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; Greg Kroah-Hartman &amp;lt;gregkh@kernel.org&amp;gt;
sub   rsa4096 2011-09-23 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   rsa2048 2011-09-20 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;SC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ABAF11C65A2970B130ABE3C479BE3E4300411886
uid           &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; unknown&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; Linus Torvalds &amp;lt;torvalds@kernel.org&amp;gt;
sub   rsa2048 2011-09-20 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;E&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Verify the signature, can ignore the warning I just haven&amp;#39;t trusted
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;➜ gpg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --verify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; linux-5.4.46.tar.sign
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; assuming signed data in &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;linux-5.4.46.tar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; Signature made Wed 10 Jun 2020 19:25:28 IST
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;                using RSA key 647F28654894E3BD457199BE38DBBDC86092693E
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; Good signature from &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Greg Kroah-Hartman &amp;lt;gregkh@kernel.org&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;unknown&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; WARNING: This key is not certified with a trusted signature!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;          There is no indication that the signature belongs to the owner.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Primary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; key fingerprint: 647F 2865 4894 E3BD 4571  99BE 38DB BDC8 6092 693E

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# I haven&amp;#39;t trusted the key so I got a warning, to do so
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;➜ gpg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --tofu-policy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; good 647F28654894E3BD457199BE38DBBDC86092693E
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; Setting TOFU trust policy for new binding &amp;lt;key: 647F28654894E3BD457199BE38DBBDC86092693E, user id: Greg Kroah-Hartman &amp;lt;gregkh@kernel.org&amp;gt;&amp;gt; to good.

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; gpg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --trust-model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; tofu&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --verify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; linux-5.4.46.tar.sign
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; assuming signed data in &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;linux-5.4.46.tar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; Signature made Wed 10 Jun 2020 19:25:28 IST
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;                using RSA key 647F28654894E3BD457199BE38DBBDC86092693E
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; Good signature from &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Greg Kroah-Hartman &amp;lt;gregkh@kernel.org&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;full&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gpg:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; gregkh@kernel.org: Verified 1 signatures in the past 0 seconds.  Encrypted
     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; messages.

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; tar xf linux-5.4.46.tar
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cd linux-5.4.46&#x2F;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Copy the current kernels config
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;➜ cp &#x2F;boot&#x2F;config-$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uname -r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) .config

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Once menuconfig loads just save and exit, no need to change anything
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;➜ make menuconfig

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# This can take a while...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;➜ time make&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -j12
  HOSTCC&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  scripts&#x2F;basic&#x2F;fixdep
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;DESCEND&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  objtool
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Install the modules
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; sudo make modules_install
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Install the kernel
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; sudo make install
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;make install&lt;&#x2F;code&gt; should setup the boot config needed in grub, I just need to reboot now. Reboot... and nothing!&lt;&#x2F;p&gt;
&lt;h1 id=&quot;silence-and-broken-graphics&quot;&gt;Silence and broken graphics&lt;&#x2F;h1&gt;
&lt;p&gt;This time &lt;code&gt;dmesg&lt;&#x2F;code&gt; is giving a different error. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  159.097340] usb 1-1.1: Product: Scarlett 6i6 USB
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  159.097343] usb 1-1.1: Manufacturer: Focusrite
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  159.097344] usb 1-1.1: SerialNumber: 00009810
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  164.318711] usb 1-1.1: Scarlett Gen 2 USB response result cmd 0 was -110
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On top of that, I broke the nvidia drivers :smile: these need to be compiled for the kernel you are on. This is my lovely 1440p display:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wayofthepie.github.io&#x2F;linux&#x2F;morning-silence&#x2F;nvidia-broken.png&quot; alt=&quot;Alt Text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Purge them and flip back to noveau for now:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; sudo apt-get remove&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --purge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; nvidia-*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; reboot
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; lshw&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -c&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; video
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;*-display
       description:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; VGA compatible controller
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;product:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; GP102 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;GeForce GTX 1080 Ti&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vendor:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; NVIDIA Corporation
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;physical&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; id: 0
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; info: pci@0000:03:00.0
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; a1
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;width:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 64 bits
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clock:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 33MHz
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;capabilities:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; vga_controller bus_master cap_list rom
       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;configuration:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; driver=nouveau latency=0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# running noveau drivers now
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;       resources: irq:73 memory:fa000000-faffffff memory:c0000000-cfffffff memory:d0000000-d1ffffff ioport:e000(size=128) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;memory:c0000-dffff
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Much better:
&lt;img src=&quot;https:&#x2F;&#x2F;wayofthepie.github.io&#x2F;linux&#x2F;morning-silence&#x2F;nvidia-fixed.png&quot; alt=&quot;Alt Text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Back to the &lt;code&gt;dmesg&lt;&#x2F;code&gt; error - &lt;code&gt;Scarlett Gen 2 USB response result cmd 0 was -110&lt;&#x2F;code&gt;. Looking at &lt;code&gt;alsamixer&lt;&#x2F;code&gt; this shows it is not recognizing the device properly.
&lt;img src=&quot;https:&#x2F;&#x2F;wayofthepie.github.io&#x2F;linux&#x2F;morning-silence&#x2F;usb-sound-ports.png&quot; alt=&quot;Alt Text&quot; &#x2F;&gt; &lt;&#x2F;p&gt;
&lt;p&gt;I wonder if it is the USB port I&#x27;m using... It is! Using a different port:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wayofthepie.github.io&#x2F;linux&#x2F;morning-silence&#x2F;usb-sound-ports-different-port.png&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I get the expected &amp;quot;Front left&amp;quot;, &amp;quot;Front center&amp;quot; sound output when running &lt;code&gt;speaker-test -t wav -c 6&lt;&#x2F;code&gt;. This is weird, as other devices work fine on that port and it was previously working there too. Something else to investigate another time I guess.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;In the end there were a number of issues. This is the first time a driver issue has caused me trouble on linux in years. But my hardware is getting old, it&#x27;s probably time to upgrade a few things. Also:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Don&#x27;t try to debug and fix an issue when you have just woken up and have had no caffeine injected into your system yet.&lt;&#x2F;li&gt;
&lt;li&gt;All computers are broken.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
</feed>
