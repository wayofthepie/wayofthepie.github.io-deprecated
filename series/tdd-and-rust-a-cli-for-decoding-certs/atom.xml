<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title> - TDD and Rust: A CLI for decoding certs</title>
	<subtitle>Software Pie</subtitle>
	<link href="https://wayofthepie.github.io/series/tdd-and-rust-a-cli-for-decoding-certs/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://wayofthepie.github.io"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2020-06-22T00:00:00+00:00</updated>
	<id>https://wayofthepie.github.io/series/tdd-and-rust-a-cli-for-decoding-certs/atom.xml</id>
	<entry xml:lang="en">
		<title>Decode A Certificate</title>
		<published>2020-06-22T00:00:00+00:00</published>
		<updated>2020-06-22T00:00:00+00:00</updated>
		<link href="https://wayofthepie.github.io/rust-cert-cli/rust-cert-cli-part3/" type="text/html"/>
		<id>https://wayofthepie.github.io/rust-cert-cli/rust-cert-cli-part3/</id>
		<content type="html">&lt;p&gt;From this post on I will leave a note at the end of some sections linking to the latest code up to that point. It will look like this:&lt;&#x2F;p&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;
&lt;span&gt;&lt;i class=&quot;icon fas fa-link&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;alert-text&quot;&gt;
  &lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wayofthepie&#x2F;cert-decoder&#x2F;tree&#x2F;a9d761e1ba306587a332e97e9fd4e654f1049ab9&quot;&gt;wayofthepie&#x2F;cert-decoder@a9d761e&lt;&#x2F;a&gt;
  &lt;&#x2F;p&gt;
&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;That link points to the latest code from the last post. &lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;some-missing-things&quot;&gt;Some missing things&lt;&#x2F;h1&gt;
&lt;p&gt;After publishing the first post I realized I missed a positive test, a test which checks that everything went ok. Let&#x27;s write that. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;should_succeed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args = vec![&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a-file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; validator = FakeValidator { is_file: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;};
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(validator, args);
    assert!(result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s a good idea to see it fail first. Let&#x27;s change a behaviour it expects by making it return an error if the file &lt;em&gt;does&lt;&#x2F;em&gt; exist:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;- if !validator.is_file(path) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+ if validator.is_file(path) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   return Err(
...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now it will fail:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;✦&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ➜ cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test should_succeed

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;running&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 1 test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;F
failures:

----&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test::should_succeed stdout ----
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test::should_succeed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39; panicked at &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;assertion failed: result.is_ok()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;, src&#x2F;main.rs:98:9
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;note:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; run with `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RUST_BACKTRACE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;` environment variable to display a backtrace


&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;failures:
    test::should_succeed

test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result: FAILED. 0 passed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; failed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ignored; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; measured; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; filtered out

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test failed, to rerun pass &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--bin cert-decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And if we revert our change:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;- if validator.is_file(path) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+ if !validator.is_file(path) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;...    
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It will pass:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;✦&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ➜ cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test should_succeed

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;running&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 1 test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result: ok. 1 passed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; failed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ignored; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; measured; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; filtered out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great! Now for some new things.&lt;&#x2F;p&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;
&lt;span&gt;&lt;i class=&quot;icon fas fa-link&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;alert-text&quot;&gt;
  &lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wayofthepie&#x2F;cert-decoder&#x2F;tree&#x2F;66da25ac49840efe43d4913eb178e71df52f5997&quot;&gt;wayofthepie&#x2F;cert-decoder@66da25a&lt;&#x2F;a&gt;
  &lt;&#x2F;p&gt;
&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;read-a-certificate&quot;&gt;Read a certificate&lt;&#x2F;h1&gt;
&lt;p&gt;Time to read a certificate. The &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;crate&#x2F;x509-parser&#x2F;0.7.0&quot;&gt;x509-parser&lt;&#x2F;a&gt; crate will allow us to do this. Add as a dependency to &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[package]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cert-decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Stephen OBrien &amp;lt;wayofthepie@users.noreply.github.com&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edition &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2018&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;

[dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x509-parser &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.7.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;b&gt;&lt;i class=&quot;fas fa-music&quot;&gt;&lt;&#x2F;i&gt; Note&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;killercup&#x2F;cargo-edit&quot;&gt;cargo-edit&lt;&#x2F;a&gt; to update &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;. You can install it by running:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;✦&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ➜ cargo install cargo-edit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then to add a dependency you just need to run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;✦&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ➜ cargo add x509-parser
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Updating &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;crates.io-index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39; index
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Adding&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; x509-parser v0.7.0 to dependencies
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;killercup&#x2F;cargo-edit&#x2F;blob&#x2F;master&#x2F;README.md&quot;&gt;the README&lt;&#x2F;a&gt; for more details. The code blocks in this note have
incorrect formatting, they are centered. I raised a bug about this, see &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;thepracticaldev&#x2F;dev.to&#x2F;issues&#x2F;8767&quot;&gt;thepracticaldev&#x2F;dev.to#8767&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It&#x27;s a good idea to rebuild when adding a new dependency.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;✦ ➜ cargo build
    Updating crates.io index
   Compiling autocfg v1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   Compiling bitflags v1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   Compiling ryu v1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   Compiling lexical-core v0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7.4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   Compiling memchr v2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3.3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   Compiling version_check v0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;9.2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   Compiling arrayvec v0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5.1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   Compiling static_assertions v1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   Compiling cfg-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; v0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   Compiling libc v0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.71
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   Compiling base64 v0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;11.0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   Compiling nom v5.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   Compiling num-traits v0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.12
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   Compiling num-integer v0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.43
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   Compiling num-bigint v0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2.6
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   Compiling time v01.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   Compiling rusticata-macros v2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   Compiling der-parser v3.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   Compiling x509-parser v0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;7.0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   Compiling cert-decode v0.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1.0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&#x2F;home&#x2F;chaospie&#x2F;repos&#x2F;blog-cert-decode&#x2F;cert-decode)
    Finished dev [unoptimize + debuginfo] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;target&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(s) in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;8.70&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;x509-parser&lt;&#x2F;code&gt; crate has pulled in a bunch of transitive dependencies. Not too many though. When working on a larger project you may want to view the overall dependency hierarchy. You can do this with &lt;code&gt;cargo tree&lt;&#x2F;code&gt;. For example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;✦&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ➜ cargo tree
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cert-decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; v0.1.0 (&#x2F;home&#x2F;chaospie&#x2F;repos&#x2F;blog-cert-decode&#x2F;cert-decode)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; x509-parser v0.7.0
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; base64 v0.11.0
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; der-parser v3.0.4
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   ├── nom v5.1.2
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   │   ├── lexical-core v0.7.4
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   │   │   ├── arrayvec v0.5.1
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   │   │   ├── bitflags v1.2.1
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   │   │   ├── cfg-if v0.1.10
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   │   │   ├── ryu v1.0.5
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   │   │   └── static_assertions v1.1.0
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   │   └── memchr v2.3.3
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   │   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;build-dependencies&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   │   └── version_check v0.9.2
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   ├── num-bigint v0.2.6
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   │   ├── num-integer v0.1.43
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   │   │   └── num-traits v0.2.12
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   │   │       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;build-dependencies&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   │   │       └── autocfg v1.0.0
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   │   │   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;build-dependencies&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   │   │   └── autocfg v1.0.0
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   │   └── num-traits v0.2.12 (*)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   │   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;build-dependencies&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   │   └── autocfg v1.0.0
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   └── rusticata-macros v2.1.0
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;       └── nom v5.1.2 (*)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; nom v5.1.2 (*)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; num-bigint v0.2.6 (*)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; rusticata-macros v2.1.0 (*)
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; time v0.1.43
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; libc v0.2.71
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;b&gt;&lt;i class=&quot;fas fa-music&quot;&gt;&lt;&#x2F;i&gt; Note&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As of Rust 1.44.0 &lt;code&gt;cargo tree&lt;&#x2F;code&gt; is part of &lt;code&gt;cargo&lt;&#x2F;code&gt; if you are using a version before that you will need to install &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;cargo-tree&quot;&gt;cargo-tree&lt;&#x2F;a&gt;. You should update to the latest Rust if there is no reason to be on a version less than 1.44.0.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I&#x27;ve used the &lt;code&gt;x509-parser&lt;&#x2F;code&gt; crate in the past so I know a bit about it&#x27;s API. But let&#x27;s do some exploration anyway. First, let&#x27;s set a goal and make a tiny test list. Our goal is simply to be able to print certificate details. Up to now, we have verified the argument we pass is a file, so I think what we should do next is:&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Read and print certificate&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;☐ Validate file is a certificate&lt;&#x2F;li&gt;
&lt;li&gt;☐ Print the certificate&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Let&#x27;s dive into the docs for &lt;code&gt;x509-parser&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;x509-parser-api&quot;&gt;x509-parser API&lt;&#x2F;h2&gt;
&lt;p&gt;All crates published to &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;&quot;&gt;crates.io&lt;&#x2F;a&gt; should have docs on &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&quot;&gt;docs.rs&lt;&#x2F;a&gt;. These docs will contain the public API of the crate and whatever further documentation the author added. We&#x27;re using version 0.7.0 of the &lt;code&gt;x509-parser&lt;&#x2F;code&gt; crate, the docs for this are &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;x509-parser&#x2F;0.7.0&#x2F;x509_parser&#x2F;&quot;&gt;here&lt;&#x2F;a&gt;. The very first example in these docs does almost what we need:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;x509_parser::parse_x509_der;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;IGCA_DER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;] = include_bytes!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;..&#x2F;assets&#x2F;IGC_A.der&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; res = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse_x509_der&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;IGCA_DER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; res {
    Ok((rem, cert)) =&amp;gt; {
        assert!(rem.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;assert_eq!(cert.tbs_certificate.version, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
    },
    _ =&amp;gt; panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;x509 parsing failed: {:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, res),
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It seems we could use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;x509-parser&#x2F;0.7.0&#x2F;x509_parser&#x2F;fn.parse_x509_der.html&quot;&gt;parse_x509_der&lt;&#x2F;a&gt; function to parse our certificate. Our certificate should be in PEM format however, that was a constraint we set in the initial post. Is there anything that can deal directly with PEM certificates in this API? &lt;&#x2F;p&gt;
&lt;p&gt;There is! The &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;x509-parser&#x2F;0.7.0&#x2F;x509_parser&#x2F;pem&#x2F;index.html&quot;&gt;x509_parser::pem&lt;&#x2F;a&gt; module has functionality for doing just this. The second example &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;x509-parser&#x2F;0.7.0&#x2F;x509_parser&#x2F;pem&#x2F;index.html&quot;&gt;in that modules docs&lt;&#x2F;a&gt; does just what we want, it uses the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;x509-parser&#x2F;0.7.0&#x2F;x509_parser&#x2F;pem&#x2F;fn.pem_to_der.html&quot;&gt;pem_to_der&lt;&#x2F;a&gt; function to convert a PEM encoded certificate into DER (Distinguished Encoding Rules) and then calls &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;x509-parser&#x2F;0.7.0&#x2F;x509_parser&#x2F;fn.parse_x509_der.html&quot;&gt;parse_x509_der&lt;&#x2F;a&gt; on that DER to build a &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;x509-parser&#x2F;0.7.0&#x2F;x509_parser&#x2F;x509&#x2F;struct.X509Certificate.html&quot;&gt;X509Certificate&lt;&#x2F;a&gt;. Here is the example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;x509_parser::pem::pem_to_der;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;x509_parser::parse_x509_der;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;IGCA_PEM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;] = include_bytes!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;..&#x2F;assets&#x2F;IGC_A.pem&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; res = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;pem_to_der&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;IGCA_PEM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; res {
    Ok((rem, pem)) =&amp;gt; {
        assert!(rem.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_empty&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;assert_eq!(pem.label, String::from(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CERTIFICATE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;));
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; res_x509 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse_x509_der&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;pem.contents);
        assert!(res_x509.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
    },
    _ =&amp;gt; panic!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PEM parsing failed: {:?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, res),
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Don&#x27;t worry if you don&#x27;t understand everything in this example, we will cover a lot of this syntax in the next few posts. Let&#x27;s look closer at &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;x509-parser&#x2F;0.7.0&#x2F;x509_parser&#x2F;pem&#x2F;fn.pem_to_der.html&quot;&gt;pem_to_der&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;pem_to_der&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]) -&amp;gt; IResult&amp;lt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;], Pem, PEMError&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It takes a &lt;code&gt;&amp;amp;&#x27;a [u8]&lt;&#x2F;code&gt;, a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;primitive.slice.html&quot;&gt;slice&lt;&#x2F;a&gt; of bytes with a lifetime&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#generics-lifetimes&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; of &lt;code&gt;&#x27;a&lt;&#x2F;code&gt;, and returns &lt;code&gt;IResult&amp;lt;&amp;amp;&#x27;a [u8], Pem, PEMError&amp;gt;&lt;&#x2F;code&gt;. I will go into more detail on lifetimes in a future post, in short they tell the compiler how long a reference lives. In this specific case, the slice &lt;code&gt;i&lt;&#x2F;code&gt; which the function takes as an argument must live as long as the slice returned in the &lt;code&gt;IResult&lt;&#x2F;code&gt; return type, as both have a lifetime of &lt;code&gt;&#x27;a&lt;&#x2F;code&gt;. This tells us the slice in the return type must either be &lt;code&gt;i&lt;&#x2F;code&gt; or a subslice of &lt;code&gt;i&lt;&#x2F;code&gt;. For more information see &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch10-00-generics.html?highlight=generics#generic-types-traits-and-lifetimes&quot;&gt;Generic Types, Traits, and Lifetimes&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Glossing over some other details which are outside the scope of this post, this &lt;code&gt;IResult&lt;&#x2F;code&gt; is effectively just a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;result&#x2F;enum.Result.html&quot;&gt;Result&lt;&#x2F;a&gt; type which we saw in the first post. It can return &lt;code&gt;Ok&lt;&#x2F;code&gt; with some value or &lt;code&gt;Err&lt;&#x2F;code&gt; with an error. In this case, the type of the value in &lt;code&gt;Err&lt;&#x2F;code&gt; will be &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;x509-parser&#x2F;0.7.0&#x2F;x509_parser&#x2F;error&#x2F;enum.PEMError.html&quot;&gt;PEMError&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;h1 id=&quot;validate-the-file-is-a-certificate&quot;&gt;Validate the file is a certificate&lt;&#x2F;h1&gt;
&lt;p&gt;Now we have enough knowledge to write a test in the case our cert is not PEM encoded. First, let&#x27;s get a cert and save it so we can use that in our tests.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; openssl s_client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; google.com:443 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;&#x2F;dev&#x2F;null &amp;lt; &#x2F;dev&#x2F;null \
&amp;gt;     | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sed -n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;BEGIN CERTIFICATE&#x2F;,&#x2F;END CERTIFICATE&#x2F;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39; &amp;gt; google.com.crt

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cat google.com.crt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-----BEGIN&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; CERTIFICATE-----
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MIIJTzCCCDegAwIBAgIQVvrczQ6+8BwIAAAAAENV5zANBgkqhkiG9w0BAQsFADBC
MQswCQYDVQQGEwJVUzEeMBwGA1UEChMVR29vZ2xlIFRydXN0IFNlcnZpY2VzMRMw
...
d5JOd+lJOypPGs0&#x2F;p5OrR8B84Y7wyKFD&#x2F;EXaKYVMZ4RUXnoAi5DF5RLKNAmnt7R9
V6z8Kz2boaY5oZ0gvrA49R6T+u3yrstte931N49lwpaVsoA&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-----END&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; CERTIFICATE-----
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I&#x27;ve stored this cert in the repo &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wayofthepie&#x2F;cert-decoder&#x2F;blob&#x2F;be75e2c756984c289768788d3f1ffadaa223ddc2&#x2F;resources&#x2F;google.com.crt&quot;&gt;here&lt;&#x2F;a&gt;. The test is as follows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;should_error_if_given_argument_is_not_a_pem_encoded_certificate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args = vec![&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;real-cert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; validator = FakeValidator { is_file: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;};
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(validator, args);
    assert!(result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The update to the &lt;code&gt;execute&lt;&#x2F;code&gt; function will need a bit of refactoring, but first, let&#x27;s implement it in the simplest way possible.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;validator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: impl PathValidator, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Vec&amp;lt;String&amp;gt;) -&amp;gt; Result&amp;lt;(), String&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; error = format!(
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: did not receive a single argument, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;please invoke cert-decoder as follows: .&#x2F;cert-decoder &#x2F;path&#x2F;to&#x2F;cert.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
        );
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(error);
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; path = &amp;amp;args[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;!validator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(path) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: path given is not a regular file, please update to point to a certificate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(),
        );
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; read file to string
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cert = std::fs::read_to_string(path).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; pem to der
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;_ = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;pem_to_der&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(cert.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
    Ok(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We use &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;fs&#x2F;fn.read_to_string.html&quot;&gt;std::fs::read_to_string&lt;&#x2F;a&gt; to read the file path we pass as an argument directly to a string. This call returns a &lt;code&gt;Result&lt;&#x2F;code&gt; as it can fail if the path does not exist. But we know it does exist at this point, so we just &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;result&#x2F;enum.Result.html#method.unwrap&quot;&gt;unwrap&lt;&#x2F;a&gt; the value, giving us our cert as a string. Then we pass that string as bytes, by calling the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;string&#x2F;struct.String.html#method.as_bytes&quot;&gt;as_bytes&lt;&#x2F;a&gt; function on it, to &lt;code&gt;pem_to_der&lt;&#x2F;code&gt;. This can fail and because here we just call &lt;code&gt;unwrap&lt;&#x2F;code&gt; this will &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;macro.panic.html&quot;&gt;panic&lt;&#x2F;a&gt; if &lt;code&gt;pem_to_der&lt;&#x2F;code&gt; returns an &lt;code&gt;Err&lt;&#x2F;code&gt; value instead of and &lt;code&gt;Ok&lt;&#x2F;code&gt; value.&lt;&#x2F;p&gt;
&lt;p&gt;To see what I mean, update the test so it reads &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;should_error_if_given_argument_is_not_a_pem_encoded_certificate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args = vec![&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cargo.toml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; validator = FakeValidator { is_file: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;};
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(validator, args);
    assert!(result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It will fail as follows because &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; is not PEM encoded:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;➜ cargo -q test pem

running &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test
F
failures:

---- test::should_error_if_given_argument_is_not_a_pem_encoded_certificate stdout ----
thread &amp;#39;test::should_error_if_given_argument_is_not_a_pem_encoded_certificate&amp;#39; panicked at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;called&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; `Result::unwrap()` on an `Err` value: Error(MissingHeader)&amp;#39;, src&#x2F;main.rs:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;33&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;13
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;note: run with `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;RUST_BACKTRACE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;` environment variable to display a backtrace


failures:
    test::should_error_if_given_argument_is_not_a_pem_encoded_certificate

test result: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;FAILED&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; passed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; failed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ignored; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; measured; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; filtered out

error: test failed, to rerun pass &amp;#39;--bin cert-decode&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Even though it did error, it didn&#x27;t do so in a way we could handle in our test. It would be better to &lt;em&gt;not&lt;&#x2F;em&gt; call unwrap on the return of &lt;code&gt;pem_to_der&lt;&#x2F;code&gt;. To do so, we need to change the return type of &lt;code&gt;execute&lt;&#x2F;code&gt; so it allows us to return both our existing &lt;code&gt;String&lt;&#x2F;code&gt; errors and the &lt;code&gt;PEMError&lt;&#x2F;code&gt; which &lt;code&gt;pem_to_der&lt;&#x2F;code&gt; returns.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;error-handling&quot;&gt;Error handling&lt;&#x2F;h2&gt;
&lt;p&gt;There are many different ways to handle errors in Rust. A lot is going on in this space currently in regards libaries and discussions in the language itself. How you handle errors in a library vs in an application can vary wildly too. I don&#x27;t want to add any more dependencies here and I also want to keep this simple, so we&#x27;ll use the most general type for handling errors, &lt;code&gt;Box&amp;lt;dyn std::error::Error&amp;gt;&lt;&#x2F;code&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#error-handling&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;beta&#x2F;std&#x2F;boxed&#x2F;index.html&quot;&gt;Box&lt;&#x2F;a&gt; is a simple way of allocating something on the heap in Rust. &lt;code&gt;Box&amp;lt;dyn std::error::Error&amp;gt;&lt;&#x2F;code&gt; is a trait object&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#trait-objects&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, this allows us to return a value of any type that implements the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;error&#x2F;trait.Error.html&quot;&gt;std::error::Error&lt;&#x2F;a&gt; trait.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s refactor. First, update &lt;code&gt;execute&lt;&#x2F;code&gt; as follows.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-fn execute(validator: impl PathValidator, args: Vec&amp;lt;String&amp;gt;) -&amp;gt; Result&amp;lt;(), String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+fn execute(
+    validator: impl PathValidator,
+    args: Vec&amp;lt;String&amp;gt;,
+) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     if args.len() != 1 {
         let error = format!(
             &amp;quot;{}{}&amp;quot;,
             &amp;quot;Error: did not receive a single argument, &amp;quot;,
             &amp;quot;please invoke cert-decoder as follows: .&#x2F;cert-decoder &#x2F;path&#x2F;to&#x2F;cert.&amp;quot;
         );
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        return Err(error);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        return Err(error.into());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     }
     let path = &amp;amp;args[0];
     if !validator.is_file(path) {
         return Err(
             &amp;quot;Error: path given is not a regular file, please update to point to a certificate.&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-                .to_owned(),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+                .into(),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         );
     }
     let cert = std::fs::read_to_string(path).unwrap();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-    let _ = pem_to_der(cert.as_bytes()).unwrap();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    let _ = pem_to_der(cert.as_bytes())?;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     Ok(())
 }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We change the return type to of &lt;code&gt;execute&lt;&#x2F;code&gt; to &lt;code&gt;Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt;&lt;&#x2F;code&gt;. We were previously returning &lt;code&gt;String&lt;&#x2F;code&gt;&#x27;s from our custom errors, we can call &lt;code&gt;into&lt;&#x2F;code&gt; on our strings and this will convert them into &lt;code&gt;Box&amp;lt;dyn std::error::Error&amp;gt;&lt;&#x2F;code&gt;. There is an instance of &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;convert&#x2F;trait.From.html&quot;&gt;From&lt;&#x2F;a&gt; for converting a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;convert&#x2F;trait.From.html#impl-From%3CString%3E-2&quot;&gt;String to a Box&amp;lt;dyn std::error::Error&amp;gt;&lt;&#x2F;a&gt;, because of this we get an &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;convert&#x2F;trait.Into.html&quot;&gt;Into&lt;&#x2F;a&gt; instance for automatically.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, we add a &lt;code&gt;?&lt;&#x2F;code&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#question-mark&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; to immediately return the error if &lt;code&gt;pem_to_der&lt;&#x2F;code&gt; returns an error. Next update &lt;code&gt;main&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-fn main() -&amp;gt; Result&amp;lt;(), String&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     let args = std::env::args().skip(1).collect();
     let validator = CertValidator;
     execute(validator, args)
 }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We just change the return type here. Finally, update the tests.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; #[cfg(test)]
 mod test {
     ... 
     #[test]
     fn should_error_if_not_given_a_single_argument() {
         ...
         assert!(result.is_err());
         assert_eq!(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-            result.err().unwrap(),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+            format!(&amp;quot;{}&amp;quot;, result.err().unwrap()),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;             format!(
                 &amp;quot;{}{}&amp;quot;,
                 &amp;quot;Error: did not receive a single argument, &amp;quot;,
                 &amp;quot;please invoke cert-decoder as follows: .&#x2F;cert-decoder &#x2F;path&#x2F;to&#x2F;cert.&amp;quot;
             )
         );
     }
 
     #[test]
     fn should_error_if_argument_is_not_a_regular_file() {
         ...
         assert!(result.is_err());
         assert_eq!(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-            result.err().unwrap(),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+            format!(&amp;quot;{}&amp;quot;, result.err().unwrap()),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;             &amp;quot;Error: path given is not a regular file, please update to point to a certificate.&amp;quot;
         );
     }
 
     #[test]
     fn should_error_if_given_argument_is_not_a_pem_encoded_certificate() {
        ...
     }
 
     #[test]
     fn should_succeed() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        let args = vec![&amp;quot;a-file&amp;quot;.to_owned()];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        let args = vec![&amp;quot;resources&#x2F;google.com.crt&amp;quot;.to_owned()];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         let validator = FakeValidator { is_file: true };
         let result = execute(validator, args);
         assert!(result.is_ok());
     }
 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We call &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;macro.format.html&quot;&gt;format&lt;&#x2F;a&gt; on the error message to turn the &lt;code&gt;Box&amp;lt;dyn std::error::Error&amp;gt;&lt;&#x2F;code&gt; in to a string. We also change the &lt;code&gt;should_succeed&lt;&#x2F;code&gt; test to read the real cert. This does IO, but that&#x27;s ok for now. Re-run and the tests should be green.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;✦&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ➜ cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;running&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 4 tests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;....
test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result: ok. 4 passed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; failed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ignored; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; measured; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; filtered out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;div class=&quot;alert alert-info&quot;&gt;
&lt;span&gt;&lt;i class=&quot;icon fas fa-link&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;alert-text&quot;&gt;
  &lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wayofthepie&#x2F;cert-decoder&#x2F;tree&#x2F;37cbc87df3ef54f9a72a7be468e20cc26d7011d1&quot;&gt;wayofthepie&#x2F;cert-decoder@37cbc87&lt;&#x2F;a&gt;
  &lt;&#x2F;p&gt;
&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;refactor&quot;&gt;Refactor&lt;&#x2F;h2&gt;
&lt;p&gt;Now we have refactored to allow returning different types of errors, read, and decoded the PEM certificate into DER format. Let&#x27;s clean things up a little. We are doing IO again, so let&#x27;s tackle that first. Right now we are passing an implementation of &lt;code&gt;PathValidator&lt;&#x2F;code&gt; to &lt;code&gt;execute&lt;&#x2F;code&gt;. It would make sense to expand what this trait does, but we should rename it. Let&#x27;s call it &lt;code&gt;FileProcessor&lt;&#x2F;code&gt;. Implementations will have &lt;code&gt;is_file&lt;&#x2F;code&gt; and &lt;code&gt;read_to_string&lt;&#x2F;code&gt; so this makes sense. Let&#x27;s also rename &lt;code&gt;CertValidator&lt;&#x2F;code&gt; to &lt;code&gt;CertProcessor&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; use std::path::Path;
 use x509_parser::pem::pem_to_der;
 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-trait PathValidator {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+trait FileProcessor {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     fn is_file(&amp;amp;self, path: &amp;amp;str) -&amp;gt; bool;
 }
 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-struct CertValidator;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+struct CertProcessor;
 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-impl PathValidator for CertValidator {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+impl FileProcessor for CertProcessor {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     fn is_file(&amp;amp;self, path: &amp;amp;str) -&amp;gt; bool {
         Path::new(path).is_file()
     }
 }
 
 fn execute(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-    validator: impl PathValidator,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    validator: impl FileProcessor,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     args: Vec&amp;lt;String&amp;gt;,
 ) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
    ...
    Ok(())
 }
 
 fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
     let args = std::env::args().skip(1).collect();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-    let validator = CertValidator;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    let validator = CertProcessor;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     execute(validator, args)
 }
 
 #[cfg(test)]
 mod test {
 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-    use crate::{execute, PathValidator};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    use crate::{execute, FileProcessor};
 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-    struct FakeValidator {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    struct FakeProcessor {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         is_file: bool,
     }
 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-    impl PathValidator for FakeValidator {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    impl FileProcessor for FakeProcessor {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         fn is_file(&amp;amp;self, _: &amp;amp;str) -&amp;gt; bool {
             self.is_file
         }
     }
 
     #[test]
     fn should_error_if_not_given_a_single_argument() {
         &#x2F;&#x2F; arrange
         let args = Vec::new();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        let validator = FakeValidator { is_file: false };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        let validator = FakeProcessor { is_file: false };
 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         ...
     }
 
     #[test]
     fn should_error_if_argument_is_not_a_regular_file() {
         &#x2F;&#x2F; arrange
         let args = vec![&amp;quot;not-a-regular-file&amp;quot;.to_owned()];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        let validator = FakeValidator { is_file: false };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        let validator = FakeProcessor { is_file: false };
 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         ...
     }
 
     #[test]
     fn should_error_if_given_argument_is_not_a_pem_encoded_certificate() {
         let args = vec![&amp;quot;Cargo.toml&amp;quot;.to_owned()];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        let validator = FakeValidator { is_file: true };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        let validator = FakeProcessor { is_file: true };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         let result = execute(validator, args);
         assert!(result.is_err())
     }
 
     #[test]
     fn should_succeed() {
         let args = vec![&amp;quot;resources&#x2F;google.com.crt&amp;quot;.to_owned()];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        let validator = FakeValidator { is_file: true };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        let validator = FakeProcessor { is_file: true };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         let result = execute(validator, args);
         assert!(result.is_ok());
     }
 }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;b&gt;&lt;i class=&quot;fas fa-music&quot;&gt;&lt;&#x2F;i&gt; Note&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You may have noticed I forgot to update the name of the variables from &lt;code&gt;validator&lt;&#x2F;code&gt; to something more appropriate like &lt;code&gt;processor&lt;&#x2F;code&gt;!
This was indeed a mistake. I added a small refactor section near the end of the post which fixes this.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;
&lt;span&gt;&lt;i class=&quot;icon fas fa-link&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;alert-text&quot;&gt;
  &lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wayofthepie&#x2F;cert-decoder&#x2F;tree&#x2F;a30ae7cf5cfdb51ad1f8cea79e0b20e9ed2f41b3&quot;&gt;wayofthepie&#x2F;cert-decoder@a30ae7c&lt;&#x2F;a&gt;
  &lt;&#x2F;p&gt;
&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Now we can add a &lt;code&gt;read_to_string&lt;&#x2F;code&gt; method to the &lt;code&gt;FileProcessor&lt;&#x2F;code&gt; trait and implement.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; use std::path::Path;
 use x509_parser::pem::pem_to_der;
 
 trait FileProcessor {
     fn is_file(&amp;amp;self, path: &amp;amp;str) -&amp;gt; bool;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    fn read_to_string(&amp;amp;self, path: &amp;amp;str) -&amp;gt; Result&amp;lt;String, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; }
 
 struct CertProcessor;
 
 impl FileProcessor for CertProcessor {
     fn is_file(&amp;amp;self, path: &amp;amp;str) -&amp;gt; bool {
         Path::new(path).is_file()
     }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    fn read_to_string(&amp;amp;self, path: &amp;amp;str) -&amp;gt; Result&amp;lt;String, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
+        Ok(std::fs::read_to_string(path)?)
+    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; }
 
 fn execute(
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-    validator: impl FileProcessor,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    processor: impl FileProcessor,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     args: Vec&amp;lt;String&amp;gt;,
 ) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
     if args.len() != 1 {
         let error = format!(
             &amp;quot;{}{}&amp;quot;,
             &amp;quot;Error: did not receive a single argument, &amp;quot;,
             &amp;quot;please invoke cert-decoder as follows: .&#x2F;cert-decoder &#x2F;path&#x2F;to&#x2F;cert.&amp;quot;
         );
         return Err(error.into());
     }
     let path = &amp;amp;args[0];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-    if !validator.is_file(path) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    if !processor.is_file(path) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         return Err(
             &amp;quot;Error: path given is not a regular file, please update to point to a certificate.&amp;quot;
                 .into(),
         );
     }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-    let cert = std::fs::read_to_string(path).unwrap();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    let cert = processor.read_to_string(path)?;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     let _ = pem_to_der(cert.as_bytes())?;
     Ok(())
 }
 
 fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
     let args = std::env::args().skip(1).collect();
     let validator = CertProcessor;
     execute(validator, args)
 }
 
 #[cfg(test)]
 mod test {
 
     use crate::{execute, FileProcessor};
 
     struct FakeProcessor {
         is_file: bool,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        file_str: String,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     }
 
     impl FileProcessor for FakeProcessor {
         fn is_file(&amp;amp;self, _: &amp;amp;str) -&amp;gt; bool {
             self.is_file
         }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        fn read_to_string(&amp;amp;self, _: &amp;amp;str) -&amp;gt; Result&amp;lt;String, Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
+            Ok(self.file_str.clone())
+        }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     }
 
     #[test]
     fn should_error_if_not_given_a_single_argument() {
         &#x2F;&#x2F; arrange
         let args = Vec::new();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        let validator = FakeProcessor { is_file: false };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        let validator = FakeProcessor {
+            is_file: false,
+            file_str: &amp;quot;&amp;quot;.to_owned(),
+        };
 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         &#x2F;&#x2F; act
         let result = execute(validator, args);
 
         &#x2F;&#x2F; assert
         assert!(result.is_err());
         assert_eq!(
             format!(&amp;quot;{}&amp;quot;, result.err().unwrap()),
             format!(
                 &amp;quot;{}{}&amp;quot;,
                 &amp;quot;Error: did not receive a single argument, &amp;quot;,
                 &amp;quot;please invoke cert-decoder as follows: .&#x2F;cert-decoder &#x2F;path&#x2F;to&#x2F;cert.&amp;quot;
             )
         );
     }
 
     #[test]
     fn should_error_if_argument_is_not_a_regular_file() {
         &#x2F;&#x2F; arrange
         let args = vec![&amp;quot;not-a-regular-file&amp;quot;.to_owned()];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        let validator = FakeProcessor { is_file: false };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        let validator = FakeProcessor {
+            is_file: false,
+            file_str: &amp;quot;&amp;quot;.to_owned(),
+        };
 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         &#x2F;&#x2F; act
         let result = execute(validator, args);
 
         &#x2F;&#x2F; assert
         assert!(result.is_err());
         assert_eq!(
             format!(&amp;quot;{}&amp;quot;, result.err().unwrap()),
             &amp;quot;Error: path given is not a regular file, please update to point to a certificate.&amp;quot;
         );
     }
 
     #[test]
     fn should_error_if_given_argument_is_not_a_pem_encoded_certificate() {
         let args = vec![&amp;quot;Cargo.toml&amp;quot;.to_owned()];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        let validator = FakeProcessor { is_file: true };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        let validator = FakeProcessor {
+            is_file: true,
+            file_str: &amp;quot;&amp;quot;.to_owned(),
+        };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         let result = execute(validator, args);
         assert!(result.is_err())
     }
 
     #[test]
     fn should_succeed() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        let args = vec![&amp;quot;resources&#x2F;google.com.crt&amp;quot;.to_owned()];
-        let validator = FakeProcessor { is_file: true };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        let cert = include_str!(&amp;quot;..&#x2F;resources&#x2F;google.com.crt&amp;quot;);
+        let args = vec![&amp;quot;doesnt-really-matter&amp;quot;.to_owned()];
+        let validator = FakeProcessor {
+            is_file: true,
+            file_str: cert.to_owned(),
+        };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         let result = execute(validator, args);
         assert!(result.is_ok());
     }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;b&gt;&lt;i class=&quot;fas fa-music&quot;&gt;&lt;&#x2F;i&gt; Note&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the &lt;code&gt;should_succeed&lt;&#x2F;code&gt; test we use the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;macro.include_str.html&quot;&gt;include_str&lt;&#x2F;a&gt; macro to read the real cert at compile time. This is cleaner than pasting the cert directly in the test. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;
&lt;span&gt;&lt;i class=&quot;icon fas fa-link&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;alert-text&quot;&gt;
  &lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wayofthepie&#x2F;cert-decoder&#x2F;tree&#x2F;436d85f6a6da208181738d186029462c66c53511&quot;&gt;wayofthepie&#x2F;cert-decoder@436d85f&lt;&#x2F;a&gt;
  &lt;&#x2F;p&gt;
&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;We can improve the tests by deriving&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#deriving&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;default&#x2F;trait.Default.html&quot;&gt;Default&lt;&#x2F;a&gt; for our &lt;code&gt;FakeProcessor&lt;&#x2F;code&gt;. This will give us a basic implementation of &lt;code&gt;FakeProcessor&lt;&#x2F;code&gt;, defaulting all the fields to the value of the &lt;code&gt;Default&lt;&#x2F;code&gt; implementation for their type. For example, the default for &lt;code&gt;bool&lt;&#x2F;code&gt; is &lt;code&gt;false&lt;&#x2F;code&gt; and for &lt;code&gt;String&lt;&#x2F;code&gt; is the empty string.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; #[cfg(test)]
 mod test {
 
     use crate::{execute, FileProcessor};
 
     ...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    #[derive(Default)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     struct FakeProcessor {
         is_file: bool,
         file_str: String,
     }
 
     #[test]
     fn should_error_if_not_given_a_single_argument() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        &#x2F;&#x2F; arrange
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         let args = Vec::new();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        let validator = FakeProcessor {
-            is_file: false,
-            file_str: &amp;quot;&amp;quot;.to_owned(),
-        };
-
-        &#x2F;&#x2F; act
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        let validator = FakeProcessor::default();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         let result = execute(validator, args);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-
-        &#x2F;&#x2F; assert
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         assert!(result.is_err());
         assert_eq!(
             format!(&amp;quot;{}&amp;quot;, result.err().unwrap()),
             format!(
                 &amp;quot;{}{}&amp;quot;,
                 &amp;quot;Error: did not receive a single argument, &amp;quot;,
                 &amp;quot;please invoke cert-decoder as follows: .&#x2F;cert-decoder &#x2F;path&#x2F;to&#x2F;cert.&amp;quot;
             )
         );
     }
 
     #[test]
     fn should_error_if_argument_is_not_a_regular_file() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        &#x2F;&#x2F; arrange
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         let args = vec![&amp;quot;not-a-regular-file&amp;quot;.to_owned()];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        let validator = FakeProcessor {
-            is_file: false,
-            file_str: &amp;quot;&amp;quot;.to_owned(),
-        };
-
-        &#x2F;&#x2F; act
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        let validator = FakeProcessor::default();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         let result = execute(validator, args);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-
-        &#x2F;&#x2F; assert
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         assert!(result.is_err());
         assert_eq!(
             format!(&amp;quot;{}&amp;quot;, result.err().unwrap()),
             &amp;quot;Error: path given is not a regular file, please update to point to a certificate.&amp;quot;
         );
     }
 
     #[test]
     fn should_error_if_given_argument_is_not_a_pem_encoded_certificate() {
         let args = vec![&amp;quot;Cargo.toml&amp;quot;.to_owned()];
         let validator = FakeProcessor {
             is_file: true,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-            file_str: &amp;quot;&amp;quot;.to_owned(),
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+            ..FakeProcessor::default()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         };
         let result = execute(validator, args);
         assert!(result.is_err())
     }
     ... 
 }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;b&gt;&lt;i class=&quot;fas fa-music&quot;&gt;&lt;&#x2F;i&gt; Note&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In a test above we used &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch05-01-defining-structs.html#creating-instances-from-other-instances-with-struct-update-syntax&quot;&gt;struct update syntax&lt;&#x2F;a&gt;, &lt;code&gt;..FakeProcessor::default()&lt;&#x2F;code&gt;. This will &amp;quot;fill in&amp;quot; any fields we do not explicitly set. It will allow us to add more fields to &lt;code&gt;FileProcessor&lt;&#x2F;code&gt; if needed and not have to update all tests. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;After each change, you should run the tests! If you run them now they should still be green.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;✦&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ➜ cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;running&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 4 tests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;....
test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result: ok. 4 passed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; failed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ignored; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; measured; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; filtered out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;div class=&quot;alert alert-info&quot;&gt;
&lt;span&gt;&lt;i class=&quot;icon fas fa-link&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;alert-text&quot;&gt;
  &lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wayofthepie&#x2F;cert-decoder&#x2F;tree&#x2F;e984bd7ffea42e30cd35bb6f65b7a7808c9be777&quot;&gt;wayofthepie&#x2F;cert-decoder@e984bd7f&lt;&#x2F;a&gt;
  &lt;&#x2F;p&gt;
&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;parse-the-der-encoded-cert&quot;&gt;Parse the der encoded cert&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s parse the DER bytes into an &lt;code&gt;X509Certificate&lt;&#x2F;code&gt;. In the &lt;a href=&quot;https:&#x2F;&#x2F;wayofthepie.github.io&#x2F;rust-cert-cli&#x2F;rust-cert-cli-part3&#x2F;#x509-parser-api&quot;&gt;x509 parser API&lt;&#x2F;a&gt; section we saw an example of this using the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;x509-parser&#x2F;0.7.0&#x2F;x509_parser&#x2F;fn.parse_x509_der.html&quot;&gt;parse_x509_der&lt;&#x2F;a&gt; function. It can fail, so first, a test.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;should_error_if_argument_is_not_a_valid_certificate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cert = include_str!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;..&#x2F;resources&#x2F;bad.crt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args = vec![&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;doesnt-really-matter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; processor = FakeProcessor {
        is_file: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
        file_str: cert.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(),
    };
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(processor, args);
    assert!(result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I have added a file called &lt;code&gt;bad.crt&lt;&#x2F;code&gt; to the resources folder. This just contains a base64 encoded string, which is not a valid certificate. So it will succeed in the &lt;code&gt;pem_to_der&lt;&#x2F;code&gt; call but calling &lt;code&gt;parse_x509_der&lt;&#x2F;code&gt; should return an error. First, let&#x27;s see this test fail.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;✦&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ➜ cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;running&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 5 tests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...F.
failures:

----&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test::should_error_if_argument_is_not_a_valid_certificate stdout ----
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test::should_error_if_argument_is_not_a_valid_certificate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39; panicked at &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;assertion failed: result.is_err()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;, src&#x2F;main.rs:118:9
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;note:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; run with `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RUST_BACKTRACE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;` environment variable to display a backtrace


&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;failures:
    test::should_error_if_argument_is_not_a_valid_certificate

test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result: FAILED. 4 passed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; failed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ignored; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; measured; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; filtered out

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test failed, to rerun pass &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--bin cert-decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great! Now, let&#x27;s parse the DER we get.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;processor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: impl FileProcessor,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Vec&amp;lt;String&amp;gt;,
) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; stripped out irrelevant code 
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;...
    
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cert = processor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;read_to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(path)?;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(_, pem) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;pem_to_der&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(cert.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;())?;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;_ = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;parse_x509_der&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;pem.contents)?;
    Ok(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And re-run the tests.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;✦&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ➜ cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;running&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 5 tests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.....
test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result: ok. 5 passed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; failed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ignored; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; measured; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; filtered out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great! We didn&#x27;t need to update the &lt;code&gt;should_succeed&lt;&#x2F;code&gt; test, meaning it is reading our real certificate correctly. There are few things we can improve here, but first, let&#x27;s mark off the first item in our test list.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Read and print certificate&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&quot;fas fa-check&quot;&gt;&lt;&#x2F;i&gt; Validate file is a certificate&lt;&#x2F;li&gt;
&lt;li&gt;☐ Print the certificate &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;
&lt;span&gt;&lt;i class=&quot;icon fas fa-link&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;alert-text&quot;&gt;
  &lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wayofthepie&#x2F;cert-decoder&#x2F;tree&#x2F;11ff773576691584fc1400176b9bff7778fea2b5&quot;&gt;wayofthepie&#x2F;cert-decoder@11ff773&lt;&#x2F;a&gt;
  &lt;&#x2F;p&gt;
&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;h2 id=&quot;print-the-certificate&quot;&gt;Print the certificate&lt;&#x2F;h2&gt;
&lt;p&gt;It turns out we will have to do a bit more processing to get a human-readable output format, so I&#x27;m going to cheat here! On success, &lt;code&gt;parse_x509_der&lt;&#x2F;code&gt; returns a tuple with remaining bytes and an &lt;code&gt;X509Certificate&lt;&#x2F;code&gt;. The &lt;code&gt;X509Certificate&lt;&#x2F;code&gt; type implements &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;fmt&#x2F;trait.Debug.html&quot;&gt;Debug&lt;&#x2F;a&gt; so we can print its debug format.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
 fn execute(
     processor: impl FileProcessor,
     args: Vec&amp;lt;String&amp;gt;,
 ) -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
     ... 
     let cert = processor.read_to_string(path)?;
     let (_, pem) = pem_to_der(cert.as_bytes())?;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-    let _ = parse_x509_der(&amp;amp;pem.contents)?;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    let (_, cert) = parse_x509_der(&amp;amp;pem.contents)?;
+    let output = format!(&amp;quot;{:#?}&amp;quot;, cert.tbs_certificate);
+    println!(&amp;quot;{}&amp;quot;, output);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     Ok(())
 }

 ...

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We use the debug format specifier &lt;code&gt;{:?}&lt;&#x2F;code&gt; in the &lt;code&gt;format&lt;&#x2F;code&gt; macro. We also add a &lt;code&gt;#&lt;&#x2F;code&gt; to pretty print it, &lt;code&gt;{:#?}&lt;&#x2F;code&gt;. The only thing we print here is the &lt;code&gt;tbs_certificate&lt;&#x2F;code&gt; field as that contains all the details we will need. To test this, let&#x27;s run the actual cli.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;b&gt;&lt;i class=&quot;fas fa-music&quot;&gt;&lt;&#x2F;i&gt; Note&lt;&#x2F;b&gt;&lt;&#x2F;p&gt;
&lt;p&gt;From the above change you might be thinking &amp;quot;Why create a pre-formatted string and pass that to &lt;code&gt;println!&lt;&#x2F;code&gt;? Couldn&#x27;t you just use the debug format specifier directly in &lt;code&gt;println!&lt;&#x2F;code&gt;?&amp;quot;. You can do this, try it and do &lt;code&gt;cargo -q run -- resources&#x2F;google.com.crt&lt;&#x2F;code&gt;. Now do it again with a pipe - &lt;code&gt;cargo -q run -- resources&#x2F;google.com.crt | head -n20&lt;&#x2F;code&gt; - it will fail. I may do a short post on why this happens. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;✦&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ➜ cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; run -- resources&#x2F;google.com.crt | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head -n20
TbsCertificate &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
    version: 2,
    serial: BigUint {
        data: [
            4412903,
            134217728,
            247394332,
            1459281101,
        ],
    },
    signature: AlgorithmIdentifier {
        algorithm: OID(1.2.840.113549.1.1.11),
        parameters: BerObject {
            class: 0,
            structured: 0,
            tag: EndOfContent,
            content: ContextSpecific(
                EndOfContent,
                Some(
                    BerObject {
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Pretty unreadable! But it&#x27;s a start, we&#x27;re making some headway. In the next post, we&#x27;ll clean this up.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Read and print certificate&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&quot;fas fa-check&quot;&gt;&lt;&#x2F;i&gt; Validate file is a certificate&lt;&#x2F;li&gt;
&lt;li&gt;&lt;i class=&quot;fas fa-check&quot;&gt;&lt;&#x2F;i&gt; Print the certificate &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;
&lt;span&gt;&lt;i class=&quot;icon fas fa-link&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;alert-text&quot;&gt;
  &lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wayofthepie&#x2F;cert-decoder&#x2F;tree&#x2F;11058e3760ee31a0f47ba57e50af016b8ca9760b&quot;&gt;wayofthepie&#x2F;cert-decoder@11058e3&lt;&#x2F;a&gt;
  &lt;&#x2F;p&gt;
&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;tiny-refactor&quot;&gt;Tiny refactor&lt;&#x2F;h1&gt;
&lt;p&gt;I realized I misnamed a few things. I missed them when refactoring. In the tests, most of the &lt;code&gt;FakeProcessor&lt;&#x2F;code&gt; variables are still called &lt;code&gt;validator&lt;&#x2F;code&gt;. Similarly in &lt;code&gt;main&lt;&#x2F;code&gt;. Let&#x27;s update those.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;  ...

 fn main() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
     let args = std::env::args().skip(1).collect();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-    let validator = CertProcessor;
-    execute(validator, args)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+    let processor = CertProcessor;
+    execute(processor, args)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; }
 
 #[cfg(test)]
 mod test {
 
     ...
     
 
     #[test]
     fn should_error_if_not_given_a_single_argument() {
         let args = Vec::new();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        let validator = FakeProcessor::default();
-        let result = execute(validator, args);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        let processor = FakeProcessor::default();
+        let result = execute(processor, args);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         assert!(result.is_err());
         assert_eq!(
             format!(&amp;quot;{}&amp;quot;, result.err().unwrap()),
             format!(
                 &amp;quot;{}{}&amp;quot;,
                 &amp;quot;Error: did not receive a single argument, &amp;quot;,
                 &amp;quot;please invoke cert-decoder as follows: .&#x2F;cert-decoder &#x2F;path&#x2F;to&#x2F;cert.&amp;quot;
             )
         );
     }
 
     #[test]
     fn should_error_if_argument_is_not_a_regular_file() {
         let args = vec![&amp;quot;not-a-regular-file&amp;quot;.to_owned()];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        let validator = FakeProcessor::default();
-        let result = execute(validator, args);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        let processor = FakeProcessor::default();
+        let result = execute(processor, args);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         assert!(result.is_err());
         assert_eq!(
             format!(&amp;quot;{}&amp;quot;, result.err().unwrap()),
             &amp;quot;Error: path given is not a regular file, please update to point to a certificate.&amp;quot;
         );
     }
 
     #[test]
     fn should_error_if_given_argument_is_not_a_pem_encoded_certificate() {
         let args = vec![&amp;quot;Cargo.toml&amp;quot;.to_owned()];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        let validator = FakeProcessor {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        let processor = FakeProcessor {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;             is_file: true,
             ..FakeProcessor::default()
         };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        let result = execute(validator, args);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        let result = execute(processor, args);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         assert!(result.is_err())
     }
 
     ...

     #[test]
     fn should_succeed() {
         let cert = include_str!(&amp;quot;..&#x2F;resources&#x2F;google.com.crt&amp;quot;);
         let args = vec![&amp;quot;doesnt-really-matter&amp;quot;.to_owned()];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        let validator = FakeProcessor {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        let processor = FakeProcessor {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;             is_file: true,
             file_str: cert.to_owned(),
         };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        let result = execute(validator, args);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        let result = execute(processor, args);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         println!(&amp;quot;{:#?}&amp;quot;, result);
         assert!(result.is_ok());
     }
 }
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;div class=&quot;alert alert-info&quot;&gt;
&lt;span&gt;&lt;i class=&quot;icon fas fa-link&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;alert-text&quot;&gt;
  &lt;p&gt;
    &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wayofthepie&#x2F;cert-decoder&#x2F;tree&#x2F;371ea84cbd017c1375b71399a7539d45b6d4ea5f&quot;&gt;wayofthepie&#x2F;cert-decoder@371ea84&lt;&#x2F;a&gt;
  &lt;&#x2F;p&gt;
&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;There were a few things I glossed over that appeared in this post. I will take note of them and make sure they appear in one of the next posts. For example lifetimes, a better explanation of &lt;code&gt;Box&lt;&#x2F;code&gt;, and that &lt;code&gt;println&lt;&#x2F;code&gt; issue I mentioned in a note in the last section.&lt;&#x2F;p&gt;
&lt;p&gt;There is also a small display issue when an error occurs. For example, if we pass no argument:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;✦&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ➜ cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; run --
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: did not receive a single argument, please invoke cert-decoder as follows: .&#x2F;cert-decoder &#x2F;path&#x2F;to&#x2F;cert.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It repeats the word &amp;quot;Error&amp;quot; and also wraps our error string in quotes. We will fix this too in the next post!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;parser-combinator&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;6&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Geal&#x2F;nom&#x2F;blob&#x2F;master&#x2F;README.md&quot;&gt;noms readme&lt;&#x2F;a&gt; has a short overview of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Geal&#x2F;nom#parser-combinators&quot;&gt;parser combinators&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;type-alias&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;7&lt;&#x2F;sup&gt;
&lt;p&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch19-04-advanced-types.html?highlight=Type,alias#advanced-types&quot;&gt;Advanced Types&lt;&#x2F;a&gt; in the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;title-page.html&quot;&gt;Rust Book&lt;&#x2F;a&gt; for more on type aliases.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;generics-lifetimes&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch10-00-generics.html?highlight=generics#generic-types-traits-and-lifetimes&quot;&gt;Generic Types, Traits, and Lifetimes&lt;&#x2F;a&gt; in the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;&quot;&gt;Rust book&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;error-handling&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;Error handling in Rust is a big topic, to get started see the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;rust-by-example&#x2F;error.html&quot;&gt;Error Handling&lt;&#x2F;a&gt; chapter in the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;&quot;&gt;Rust book&lt;&#x2F;a&gt;. For more on boxed errors see &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;rust-by-example&#x2F;error&#x2F;multiple_error_types&#x2F;boxing_errors.html&quot;&gt;Boxing errors&lt;&#x2F;a&gt;.d&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;trait-objects&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch17-02-trait-objects.html&quot;&gt;Using Trait Objects That Allow for Values of Different Types&lt;&#x2F;a&gt; in the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;&quot;&gt;Rust book&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;question-mark&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;For more on how the &lt;code&gt;?&lt;&#x2F;code&gt; works see &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;edition-guide&#x2F;rust-2018&#x2F;error-handling-and-panics&#x2F;the-question-mark-operator-for-easier-error-handling.html&quot;&gt;The ? operator for easier error handling&lt;&#x2F;a&gt;.
&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#deriving&quot;&gt;5&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;: For more on deriving see &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;rust-by-example&#x2F;trait&#x2F;derive.html&quot;&gt;Derive&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Rust and GitHub Actions</title>
		<published>2020-06-07T00:00:00+00:00</published>
		<updated>2020-06-07T00:00:00+00:00</updated>
		<link href="https://wayofthepie.github.io/rust-cert-cli/rust-cert-cli-part2/" type="text/html"/>
		<id>https://wayofthepie.github.io/rust-cert-cli/rust-cert-cli-part2/</id>
		<content type="html">&lt;p&gt;Before we continue implementing our CLI, let&#x27;s take time to set up some &lt;a href=&quot;https:&#x2F;&#x2F;help.github.com&#x2F;en&#x2F;actions&quot;&gt;GitHub Actions&lt;&#x2F;a&gt; to build and test our commits. We&#x27;ll use the actions defined in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;actions-rs&quot;&gt;actions-rs GitHub Organization&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;div class=&quot;alert alert-info&quot;&gt;
&lt;span&gt;&lt;i class=&quot;icon fas fa-info-circle&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;alert-text&quot;&gt;
  &lt;p&gt;
  Originally posted on &lt;a href=&quot;https:&#x2F;&#x2F;dev.to&quot;&gt;dev.to&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;wayofthepie&#x2F;rust-and-github-actions-3kob&quot;&gt;here&lt;&#x2F;a&gt;.
  &lt;&#x2F;p&gt;
&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;build-and-test&quot;&gt;Build and test&lt;&#x2F;h1&gt;
&lt;p&gt;The workflow I normally follow when coding is to create a short-lived branch on which all commits are built and tested then create a Pull Request (PR) into the master branch. I do this even if I am the only developer on a repo. Let&#x27;s set this up. Check out a new branch, let&#x27;s call it actions. Then, create a file called &lt;code&gt;build.yml&lt;&#x2F;code&gt; under &lt;code&gt;.github&#x2F;workflows&#x2F;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; mkdir&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; .github&#x2F;workflows
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; touch .github&#x2F;workflows&#x2F;build.yml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ll create a simple action that builds and tests our CLI. Add the following to &lt;code&gt;build.yml&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build
jobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ubuntu-latest
    steps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;actions&#x2F;checkout@v2
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;actions-rs&#x2F;toolchain@v1
        with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toolchain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stable
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build
        uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;actions-rs&#x2F;cargo@v1
        with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test
        uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;actions-rs&#x2F;cargo@v1
        with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;on&lt;&#x2F;code&gt; defines the event(s)&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#events&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; which should trigger this workflow. We set it to run on a &lt;code&gt;push&lt;&#x2F;code&gt; to any branch. The workflow has a single job, called &lt;code&gt;build&lt;&#x2F;code&gt;. This job runs on the &lt;code&gt;ubuntu-latest&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;help.github.com&#x2F;en&#x2F;actions&#x2F;reference&#x2F;virtual-environments-for-github-hosted-runners&quot;&gt;Virtual Environment&lt;&#x2F;a&gt;. It checks out our code, installs the stable Rust toolchain and runs a &lt;code&gt;cargo build&lt;&#x2F;code&gt; then runs a &lt;code&gt;cargo test&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Commit this change and push to your repo. GitHub Actions will then run this workflow. Once complete, when you click the &lt;code&gt;Actions&lt;&#x2F;code&gt; tab on your repo, you should see something like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;dev-to-uploads.s3.amazonaws.com&#x2F;i&#x2F;243h3td9vvz0t2unxdts.png&quot; alt=&quot;Alt Text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I had two builds, as I rebased a commit, you will likely only see one. Click into the build, then click the &lt;code&gt;build&lt;&#x2F;code&gt; job on the left with the checkmark and it will show you the steps in the workflow.
&lt;img src=&quot;https:&#x2F;&#x2F;dev-to-uploads.s3.amazonaws.com&#x2F;i&#x2F;bc5tgf2sd36xh13pwcj9.png&quot; alt=&quot;Alt Text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is a good start. All commits will be built and tested. We can add a check to PR&#x27;s so that they will block merges if this workflow fails. But first, let&#x27;s add some improvements. The code up to this point can be seen &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wayofthepie&#x2F;cert-decoder&#x2F;tree&#x2F;da88d93a4a4aacc47b3b9286951f2d96f7d5841c&quot;&gt;here&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;h1 id=&quot;clippy-lint&quot;&gt;Clippy lint&lt;&#x2F;h1&gt;
&lt;p&gt;One thing we did not do in the last post was to run a linter. Rust has an awesome linter called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&quot;&gt;Clippy&lt;&#x2F;a&gt; which can highlight quite a lot of issues. Let&#x27;s run it in our project now.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cargo clippy
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Finished&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; dev &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;unoptimized + debuginfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; target(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 0.01s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;No issues, great! Like any test, let&#x27;s see it fail. Or in this case, make Clippy give out to us. Let&#x27;s add something Clippy does not like to &lt;code&gt;main.rs&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() -&amp;gt; Result&amp;lt;(), String&amp;gt; {
    assert!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; clippy won&amp;#39;t like this 
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args = std::env::args().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; validator = CertValidator;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(validator, args)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Assertions on a constant are optimized out by the compiler&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#clippy-lint&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt;, so Clippy will warn about this. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cargo clippy
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;warning: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assert!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(false)` should probably be replaced
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt; src&#x2F;main.rs:35:5
   |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;35 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;assert!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(false);
   |     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;^^^^^^^^^^^^^^^
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|
   = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;note: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;#[warn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(clippy::assertions_on_constants)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;` on by default
   = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;help:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; use `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;panic!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()` or `unreachable!()`
 = help: for further information visit https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rust-clippy&#x2F;master&#x2F;index.html#assertions_on_constants
   = note: this warning originates in a macro (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; Nightly builds, run with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -Z&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; macro-backtrace for more info)

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;warning:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 1 warning emitted

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Finished&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; dev &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;unoptimized + debuginfo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; target(s) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 0.01s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;div class=&quot;alert alert-info&quot;&gt;
&lt;span&gt;&lt;i class=&quot;icon fas fa-music&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;alert-text&quot;&gt;
  &lt;p&gt;
Sometimes on a subsequent run, Clippy will just say it&#x27;s successful and not run correctly. See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rust-clippy&#x2F;issues&#x2F;2604&quot;&gt;&lt;&#x2F;a&gt; for more information. If you think this is happening you can force a full re-run by modifying a file, e.g. &lt;b&gt;touch src&#x2F;main.rs; cargo clippy&lt;&#x2F;b&gt;. It seems this should be fixed, but might only be fixed in nightly Rust, not stable.
  &lt;&#x2F;p&gt;
&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Great! Just what we want. Let&#x27;s leave this assertion here and update our existing workflow to add a lint step which runs Clippy. The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;actions-rs&#x2F;clippy-check&quot;&gt;clippy-check&lt;&#x2F;a&gt; action will allow us to easily do this.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build
jobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ubuntu-latest
    steps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;actions&#x2F;checkout@v2
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;actions-rs&#x2F;toolchain@v1
        with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;toolchain&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;table
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build
        uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;actions-rs&#x2F;cargo@v1
        with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;build
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test
        uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;actions-rs&#x2F;cargo@v1
        with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;lint
        uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;actions-rs&#x2F;clippy-check@v1
        with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ secrets.GITHUB_TOKEN }}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Commit both the assertion and the &lt;code&gt;lint&lt;&#x2F;code&gt; addition to the workflow and push. Once the workflow run finishes, click into the Clippy step and you should see something like this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wayofthepie.github.io&#x2F;rust-cert-cli&#x2F;rust-cert-cli-part2&#x2F;clippy-in-gh-actions.png&quot; alt=&quot;Clippy warnings in github actions.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The warning is now attached to a commit and links to a specific file. Click the text &amp;quot;Check warning on line 35 in src&#x2F;main.rs&amp;quot; in the annotation and it should bring you to exactly where this issue occurs.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wayofthepie.github.io&#x2F;rust-cert-cli&#x2F;rust-cert-cli-part2&#x2F;warning-in-gh-actions.png&quot; alt=&quot;Single clippy warning in github actions.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is nice! Create a PR and you will see this annotation exactly as it is above in the &lt;code&gt;Files Changed&lt;&#x2F;code&gt; tab. I find this useful, even if I am the sole developer. Sometimes I forget to run Clippy and I always do a quick review of the code in a PR. Create a PR into for this and you will also see the checks have all passed.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wayofthepie.github.io&#x2F;rust-cert-cli&#x2F;rust-cert-cli-part2&#x2F;action-checks-passed.png&quot; alt=&quot;Alt Text&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s make one last change. The code up this point can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wayofthepie&#x2F;cert-decoder&#x2F;commit&#x2F;134827d780528b43d1181f07d65e5b397e2867e4&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;block-pr-s-on-failing-checks&quot;&gt;Block PR&#x27;s on failing checks&lt;&#x2F;h2&gt;
&lt;p&gt;If we somehow manage to check something in which does not compile, has failing tests, or has Clippy lint issues which it is set to deny, we should block the PR, i.e. not allow it to be merged until these issues are fixed. This may seem like overkill if you are the only dev on a repo, but I do this all the time because I make these mistakes! No matter how careful I try to be.&lt;&#x2F;p&gt;
&lt;p&gt;Before we configure our repo to block PRs, a quick note on Clippy lints.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;clippy-deny-lints&quot;&gt;Clippy deny lints&lt;&#x2F;h3&gt;
&lt;p&gt;The lint we have in our PR above is just a warning. Clippy also has several lints that will cause it to fail if detected. These are lints at the &lt;code&gt;Deny&lt;&#x2F;code&gt; level in the list of &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rust-clippy&#x2F;master&#x2F;index.html&quot;&gt;Clippy lints&lt;&#x2F;a&gt;. For example, the lint &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rust-clippy&#x2F;master&#x2F;index.html#approx_constant&quot;&gt;approx_constant&lt;&#x2F;a&gt; checks for constants which are defined under &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;f32&#x2F;consts&#x2F;#constants&quot;&gt;std::f32::consts&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;f64&#x2F;consts&#x2F;#constants&quot;&gt;std::f64::consts&lt;&#x2F;a&gt;. If it finds matching constants in your code it will error out.&lt;&#x2F;p&gt;
&lt;p&gt;To see this in action, update &lt;code&gt;main&lt;&#x2F;code&gt; with an unused variable which approximates pi. Before you do that, make sure you have committed your changes up to here, so we can easily reset. I&#x27;ve commented out the &lt;code&gt;assert!(false)&lt;&#x2F;code&gt; we added earlier so we don&#x27;t also get a warning for that from Clippy.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() -&amp;gt; Result&amp;lt;(), String&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; assert!(false);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;_ = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3.14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args = std::env::args().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; validator = CertValidator;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(validator, args)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run Clippy and it will give an error, and return a non-zero exit code.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cargo clippy
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Checking&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cert-decode v0.1.0 (&#x2F;home&#x2F;chaospie&#x2F;repos&#x2F;blog-cert-decode&#x2F;cert-decode)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; approximate value of `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;f{32,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 64}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;::consts::PI&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;` found. Consider using it directly
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;--&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt; src&#x2F;main.rs:36:13
   |
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;36 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; _ = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
   |             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;^^^^
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|
   = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;note: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;#[deny&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(clippy::approx_constant)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;` on by default
   = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;help:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; for further information visit https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rust-clippy&#x2F;master&#x2F;index.html#approx_constant

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; aborting due to previous error

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; could not compile `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cert-decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;`.

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;To&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; learn more, run the command again with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --verbose&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; echo $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;?
101
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;echo $?&lt;&#x2F;code&gt; will print the return code of the last command executed in the shell. Don&#x27;t forget to reset these changes, either manually or by running &lt;code&gt;git checkout src&#x2F;main.rs&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;protected-branch-rule&quot;&gt;Protected branch rule&lt;&#x2F;h3&gt;
&lt;p&gt;The configuration for blocking PRs is defined with a protected branch&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#protected-branch&quot;&gt;3&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; rule. Go to &lt;em&gt;Settings -&amp;gt; Branches -&amp;gt; Branch protection rules -&amp;gt; Add rule&lt;&#x2F;em&gt; in you repo. Set the &lt;em&gt;Branch name pattern&lt;&#x2F;em&gt; to &lt;code&gt;master&lt;&#x2F;code&gt; and select the status checks to verify in PRs as follows.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wayofthepie.github.io&#x2F;rust-cert-cli&#x2F;rust-cert-cli-part2&#x2F;protected-branch-rules.png&quot; alt=&quot;View of githubs protected branch rules settings.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;
&lt;span&gt;&lt;i class=&quot;icon fas fa-music&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;alert-text&quot;&gt;
  &lt;p&gt;
So I have an extra status check here called &lt;b&gt;build_and_test&lt;&#x2F;b&gt; because I had initially defined the job in our workflow YAML &lt;b&gt;build_and_test&lt;&#x2F;b&gt;. It is now called &lt;b&gt;build&lt;&#x2F;b&gt;.
  &lt;&#x2F;p&gt;
&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;Now if we raise a PR with any failure in our &lt;code&gt;build&lt;&#x2F;code&gt; job - the job in our workflow YAML - or the Clippy step specifically, the PR will be blocked from merging. This is what it would look like:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wayofthepie.github.io&#x2F;rust-cert-cli&#x2F;rust-cert-cli-part2&#x2F;actions-failing-build.png&quot; alt=&quot;Github actions failing build overview.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And the details of the lint error:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wayofthepie.github.io&#x2F;rust-cert-cli&#x2F;rust-cert-cli-part2&#x2F;lint-error.png&quot; alt=&quot;Github actions clippy error showing specific lint issue and the line it occurred.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Note that because I am the only dev, I am an admin on this repo so I can still merge. But it is glaringly obvious something is wrong. This has saved me a few times.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;clean-up-and-merge&quot;&gt;Clean up and merge&lt;&#x2F;h3&gt;
&lt;p&gt;The PR you raised, before our Clippy deny lints digression, has a warning because of the &lt;code&gt;assert!(false)&lt;&#x2F;code&gt; call in &lt;code&gt;main&lt;&#x2F;code&gt;. Clean that up, commit, push, and merge it. &lt;code&gt;main&lt;&#x2F;code&gt; should look as follows again:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() -&amp;gt; Result&amp;lt;(), String&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args = std::env::args().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; validator = CertValidator;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(validator, args)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The only change in your PR should be the &lt;code&gt;build.yml&lt;&#x2F;code&gt; file. Once merged the workflow will run again on &lt;code&gt;master&lt;&#x2F;code&gt; and be successful. There is one more workflow I usually add to Rust repositories. So let&#x27;s add that also. See &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wayofthepie&#x2F;cert-decoder&#x2F;commit&#x2F;50da0793f35ecdb5b0ea18196d0b16a24d426902&quot;&gt;here&lt;&#x2F;a&gt; for the code up to this point.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;security-audit&quot;&gt;Security audit&lt;&#x2F;h1&gt;
&lt;p&gt;GitHub tracks vulnerabilities from several &lt;a href=&quot;https:&#x2F;&#x2F;help.github.com&#x2F;en&#x2F;github&#x2F;visualizing-repository-data-with-graphs&#x2F;listing-the-packages-that-a-repository-depends-on#supported-languages&quot;&gt;supported language package managers&lt;&#x2F;a&gt;. It will alert you if your repository contains a vulnerable dependency. It doesn&#x27;t support &lt;code&gt;cargo&lt;&#x2F;code&gt; yet, I&#x27;m not sure if they have plans to support it either. However, &lt;code&gt;cargo&lt;&#x2F;code&gt; has the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;RustSec&#x2F;cargo-audit&quot;&gt;cargo-audit&lt;&#x2F;a&gt; and we can use this in a workflow. &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;actions-rs&quot;&gt;actions-rs&lt;&#x2F;a&gt; has an action just for this, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;actions-rs&#x2F;audit-check&quot;&gt;audit-check&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s create a new branch called &lt;code&gt;audit-workflow&lt;&#x2F;code&gt; and add a new workflow at &lt;code&gt;.github&#x2F;workflows&#x2F;security-audit.yml&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Security audit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;schedule&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
    - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cron&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0 8 * * *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;paths&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
      - &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;**&#x2F;Cargo.*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pull_request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;branches&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;master
jobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;security_audit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;runs-on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ubuntu-latest
    steps&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
      - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;actions&#x2F;checkout@v1
      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uses&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;actions-rs&#x2F;audit-check@v1
        with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:
          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;${{ secrets.GITHUB_TOKEN }}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will run the audit check at 8 am UTC every day, whenever we commit and push a change to any branch which updates &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; or &lt;code&gt;Cargo.lock&lt;&#x2F;code&gt; and whenever we create a PR into master. &lt;&#x2F;p&gt;
&lt;p&gt;Why all these cases? Well, we do it daily at 8 am as a vulnerability can be found in dependencies at any time, so we should check daily that nothing new was found. We do it on changes to &lt;code&gt;Cargo.*&lt;&#x2F;code&gt; files so we can immediately detect if a change in dependencies has introduced and vulnerability. Finally, we do it on a PR into &lt;code&gt;master&lt;&#x2F;code&gt; so we can be sure, at least at the time of the PR, that we are not pushing known vulnerabilities to our &lt;code&gt;master&lt;&#x2F;code&gt; branch.&lt;&#x2F;p&gt;
&lt;p&gt;Commit and push this workflow change to our branch. Let&#x27;s test that it works. To do so add a dependency to &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[package]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cert-decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Stephen OBrien &amp;lt;wayofthepie@users.noreply.github.com&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edition &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2018&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;

[dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x509-parser &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.7.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run a build with &lt;code&gt;cargo build&lt;&#x2F;code&gt; so &lt;code&gt;Cargo.lock&lt;&#x2F;code&gt; gets updated. Because this is just a test, we can edit the last commit and then later remove the dependency and edit again. Don&#x27;t ever do this on a shared branch! This is how to do it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git add Cargo.* 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --amend --no-edit
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git push origin +HEAD
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;+HEAD&lt;&#x2F;code&gt; in the &lt;code&gt;git push&lt;&#x2F;code&gt; command says to force push to the branch &lt;code&gt;HEAD&lt;&#x2F;code&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#HEAD&quot;&gt;4&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; points to. A force push rewrites history, this is why you should not do it on a shared branch. &lt;code&gt;HEAD&lt;&#x2F;code&gt; is the current branch. As we have changed the &lt;code&gt;Cargo.*&lt;&#x2F;code&gt; files the audit workflow should run. It will hopefully be successful.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wayofthepie.github.io&#x2F;rust-cert-cli&#x2F;rust-cert-cli-part2&#x2F;security-audit-workflow-actions.png&quot; alt=&quot;Overview of actions when we add the security audit workflow.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To go back to the previous state you can remove the dependency from &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-toml&quot; data-lang=&quot;toml&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[package]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cert-decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;authors &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= [&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Stephen OBrien &amp;lt;wayofthepie@users.noreply.github.com&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edition &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2018&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;

[dependencies]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Build with &lt;code&gt;cargo build&lt;&#x2F;code&gt;, and edit the last commit again.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git add Cargo.* 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git commit&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --amend --no-edit
$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; git push origin +HEAD
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Before creating another PR for this, you should update the branch protection settings and add &lt;code&gt;security_audit&lt;&#x2F;code&gt; as a status check.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;wayofthepie.github.io&#x2F;rust-cert-cli&#x2F;rust-cert-cli-part2&#x2F;add-sec-audit-workflow-to-protected.png&quot; alt=&quot;Add security_audit workflow to the protected branch settings.&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now you can create a PR into &lt;code&gt;master&lt;&#x2F;code&gt; and this should run again. If it&#x27;s green, merge it. The code up to the end of this post can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wayofthepie&#x2F;cert-decoder&#x2F;commit&#x2F;a9d761e1ba306587a332e97e9fd4e654f1049ab9&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;div class=&quot;alert alert-info&quot;&gt;
&lt;span&gt;&lt;i class=&quot;icon fas fa-music&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;alert-text&quot;&gt;
  &lt;p&gt;
This audit workflow can take some time to run as it first needs to install &lt;b&gt;cargo-audit&lt;&#x2F;b&gt;. This takes about 5 minutes looking at the logs for a run. We can improve this with caching, but I&#x27;ll leave that for another post.
  &lt;&#x2F;p&gt;
&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h1&gt;
&lt;p&gt;We now have:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A build and test workflow for all our commits.&lt;&#x2F;li&gt;
&lt;li&gt;Security auditing on our dependencies.&lt;&#x2F;li&gt;
&lt;li&gt;Checks which block PR&#x27;s if we have broken builds, lint issues, or vulnerabilities in dependencies&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is something I always set up at the start of a project. We&#x27;ll go back to implementing the CLI in the next post. &lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;events&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;help.github.com&#x2F;en&#x2F;actions&#x2F;reference&#x2F;events-that-trigger-workflows&quot;&gt;Events that trigger workflows&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;clippy-lint&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;See the &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;rust-clippy&#x2F;master&#x2F;index.html#assertions_on_constants&quot;&gt;assertions_on_constants&lt;&#x2F;a&gt; lint.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;protected-branch&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;See &lt;a href=&quot;https:&#x2F;&#x2F;help.github.com&#x2F;en&#x2F;github&#x2F;administering-a-repository&#x2F;configuring-protected-branches&quot;&gt;Configuring protected branches&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;HEAD&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;4&lt;&#x2F;sup&gt;
&lt;p&gt;For more on the &lt;code&gt;HEAD&lt;&#x2F;code&gt; reference see &lt;a href=&quot;https:&#x2F;&#x2F;git-scm.com&#x2F;book&#x2F;en&#x2F;v2&#x2F;Git-Internals-Git-References#ref_the_ref&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>A Rust cli for decoding certs</title>
		<published>2020-06-02T00:00:00+00:00</published>
		<updated>2020-06-02T00:00:00+00:00</updated>
		<link href="https://wayofthepie.github.io/rust-cert-cli/rust-cert-cli/" type="text/html"/>
		<id>https://wayofthepie.github.io/rust-cert-cli/rust-cert-cli/</id>
		<content type="html">&lt;p&gt;In this series of posts, we&#x27;ll start to build a simple cli in &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;&quot;&gt;Rust&lt;&#x2F;a&gt; for decoding X.509 certificates. I&#x27;ll try to keep it as beginner-friendly as possible, by explaining things as best I can when they may be unclear. Some basic Rust knowledge should hopefully be all you need. Feel free to ask any questions in the comments below!&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;div class=&quot;alert alert-info&quot;&gt;
&lt;span&gt;&lt;i class=&quot;icon fas fa-info-circle&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;span&gt;
&lt;span class=&quot;alert-text&quot;&gt;
  &lt;p&gt;
  Originally posted on &lt;a href=&quot;https:&#x2F;&#x2F;dev.to&quot;&gt;dev.to&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;wayofthepie&#x2F;a-rust-cli-for-decoding-certs-280i&quot;&gt;here&lt;&#x2F;a&gt;.
  &lt;&#x2F;p&gt;
&lt;&#x2F;span&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;If you are completely new to Rust and don&#x27;t even have it installed, you can install it using &lt;a href=&quot;https:&#x2F;&#x2F;rustup.rs&#x2F;&quot;&gt;rustup&lt;&#x2F;a&gt;. You should hopefully still be able to follow along. This first post will mainly focus on a Test Driven Development workflow. I wrote this as I was developing so mistakes or things which I overlooked and ended up factoring out afterward are all kept in.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;what-are-we-building&quot;&gt;What are we building?&lt;&#x2F;h1&gt;
&lt;p&gt;I generally use the &lt;code&gt;openssl&lt;&#x2F;code&gt; cli for pulling information out of certificates. Specifically the &lt;code&gt;x509&lt;&#x2F;code&gt; command, for example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# get certificate
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; openssl s_client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; google.com:443 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;&#x2F;dev&#x2F;null &amp;lt; &#x2F;dev&#x2F;null \
    | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sed -n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;BEGIN CERTIFICATE&#x2F;,&#x2F;END CERTIFICATE&#x2F;p&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39; &amp;gt; google.com.crt 

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# extract info
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ openssl x509&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -text -noout -in&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; google.com.crt | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;head -n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 5
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Certificate:
    Data:
        Version:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 3 (0x2)
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Serial&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; Number:
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1a:86:8b:0d:af:9b:c7:34:08:00:00:00:00:3e:bd:97
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;All this does is print out a certificate as a human-readable string. I&#x27;ve written about what information certificates contain &lt;a href=&quot;https:&#x2F;&#x2F;dev.to&#x2F;wayofthepie&#x2F;structure-of-an-ssl-x-509-certificate-16b&quot;&gt;here&lt;&#x2F;a&gt; if interested. What we want to do in the next few posts is to see if we can build something similar to the &lt;code&gt;openssl x509 -text&lt;&#x2F;code&gt; output from above in a Rust cli. &lt;&#x2F;p&gt;
&lt;h1 id=&quot;some-constraints-to-simplify-the-cli&quot;&gt;Some constraints to simplify the cli&lt;&#x2F;h1&gt;
&lt;p&gt;Let&#x27;s think about the API for this cli, how a user will call it. To keep things simple, it should just take a file path to a single certificate. So we should end up with a call like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cert-decoder &#x2F;path&#x2F;to&#x2F;some&#x2F;cert.pem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Another constraint to keep this simple at the beginning is the encoding of the certificate. Let&#x27;s say the certificate must be PEM &lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#pem&quot;&gt;1&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; (Privacy Enhanced Mail) encoded. This is the encoding you generally see certificates with. It&#x27;s a string which begins with a line comprised of &lt;code&gt;-----BEGIN CERTIFICATE-----&lt;&#x2F;code&gt;, then some base64 encoded DER (Distinguished Encoding Rules) and ends with a line comprised of &lt;code&gt;-----END CERTIFICATE-----&lt;&#x2F;code&gt;. It looks as follows, with some of the base64 string stripped out and replaced with &lt;code&gt;...&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;-----BEGIN CERTIFICATE-----
MIIJTzCCCDegAwIBAgIQGoaLDa+bxzQIAAAAAD69lzANBgkqhkiG9w0BAQsFADBC
...
DMCTA95gzVKezFCaUidRU9UyHOFzltfYDt7HRlp7MwWoPLM=
-----END CERTIFICATE-----
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;&lt;h1 id=&quot;test-list&quot;&gt;Test list&lt;&#x2F;h1&gt;
&lt;p&gt;We have a basic API and some constraints now. Let&#x27;s make a test list before we do anything else. This is simply a list of tests we should write to cover some piece of functionality. Let&#x27;s just cover the most simple thing initially, validating the arguments. &lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Validate args&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;☐ Only allow a single argument&lt;&#x2F;li&gt;
&lt;li&gt;☐ Argument is a path that exists&lt;&#x2F;li&gt;
&lt;li&gt;☐ Argument should be a single file &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Implementing this we can start to use it and see where we should go next.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;validate-args&quot;&gt;Validate args&lt;&#x2F;h1&gt;
&lt;p&gt;First, create a new project with &lt;code&gt;cargo new cert-decoder&lt;&#x2F;code&gt;. &lt;code&gt;main.rs&lt;&#x2F;code&gt;  should look as follows initially.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, world!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s create a test for the first item on our test list.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, world!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
}

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(test)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;test {

    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;should_error_if_not_given_a_single_argument&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create fake args list, with no args
        &#x2F;&#x2F; run function with args
        &#x2F;&#x2F; check that it returns an error
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Above I&#x27;ve outlined what we need to do in this test in comments. It&#x27;s not easy to test this through the &lt;code&gt;main&lt;&#x2F;code&gt; function as &lt;code&gt;main&lt;&#x2F;code&gt; does not take any arguments in its signature. In Rust to read program arguments you use the function &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;env&#x2F;fn.args.html&quot;&gt;std::env::args&lt;&#x2F;a&gt;, more on that later.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s create a new function called &lt;code&gt;execute&lt;&#x2F;code&gt;. We know we want this function to return an error so we will make it return a &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;result&#x2F;enum.Result.html&quot;&gt;Result&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Vec&amp;lt;String&amp;gt;) -&amp;gt; Result&amp;lt;(), ()&amp;gt; {
    Ok(())
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, world!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
}

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(test)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;test {

    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;should_error_if_not_given_a_single_argument&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; create fake args list, with no args
        &#x2F;&#x2F; run function with args
        &#x2F;&#x2F; check that it returns an error
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For now execute just returns an &lt;code&gt;Ok&lt;&#x2F;code&gt; result with a value of &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;primitive.unit.html&quot;&gt;()&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;. This is called the &lt;em&gt;unit&lt;&#x2F;em&gt; type. Now let&#x27;s write our test.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Vec&amp;lt;String&amp;gt;) -&amp;gt; Result&amp;lt;(), ()&amp;gt; {
    Ok(())
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, world!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
}

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(test)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;test {

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;::execute;

    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;should_error_if_not_given_a_single_argument&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args = Vec::new();
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(args);
        assert!(result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If we run this with &lt;code&gt;cargo -q test&lt;&#x2F;code&gt;&lt;sup class=&quot;footnote-reference&quot;&gt;&lt;a href=&quot;#cargoq&quot;&gt;2&lt;&#x2F;a&gt;&lt;&#x2F;sup&gt; it will fail. There will also be a warning about the &lt;code&gt;args&lt;&#x2F;code&gt; parameter in &lt;code&gt;execute&lt;&#x2F;code&gt; not being used, but we can ignore that for now.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
running&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 1 test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;F
failures:

----&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test::should_error_if_not_given_a_single_argument stdout ----
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test::should_error_if_not_given_a_single_argument&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39; panicked at &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;assertion failed: result.is_err()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;, src&#x2F;ma
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;in.rs:18:9
note:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; run with `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RUST_BACKTRACE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;` environment variable to display a backtrace


&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;failures:
    test::should_error_if_not_given_a_single_argument

test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result: FAILED. 0 passed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; failed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ignored; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; measured; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; filtered out

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test failed, to rerun pass &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--bin cert-decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s make it pass by making a tiny change.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Vec&amp;lt;String&amp;gt;) -&amp;gt; Result&amp;lt;(), ()&amp;gt; {
    Err(())
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Hello, world!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
}

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(test)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;test {

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;::execute;

    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;should_error_if_not_given_a_single_argument&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args = Vec::new();
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(args);
        assert!(result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s re-run and it should be green.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
running&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 1 test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result: ok. 1 passed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; failed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ignored; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; measured; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; filtered out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great! Now we just need to make it return an error only in the case we mention in our first test list item. When we do not receive just a single argument.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Vec&amp;lt;String&amp;gt;) -&amp;gt; Result&amp;lt;(), ()&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(());
    }
    Ok(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Re-run and it should still be green.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;running&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 1 test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result: ok. 1 passed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; failed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ignored; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; measured; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; filtered out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Awesome! We should change this to return an error message. But first a quick note about this workflow.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-note-on-this-workflow&quot;&gt;A note on this workflow&lt;&#x2F;h2&gt;
&lt;p&gt;This is how I generally write code. What&#x27;s the smallest useful change I can make to add functionality? In this case, to get started it was argument validation. With that in mind, I decomposed this further into items that look like individually testable parts of the behavior we want in argument validation. I made a list of them so I can tick them off as I go. This helps to keep the focus on a single small piece of functionality. It&#x27;s especially useful when decomposing complex changes.&lt;&#x2F;p&gt;
&lt;p&gt;To implement, write a test that specifies the behavior of one of the items. Then, make it fail, make it pass with &lt;em&gt;any&lt;&#x2F;em&gt; code, change to implement the real behavior, and finally refactor where appropriate.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;add-an-error-message&quot;&gt;Add an error message&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s improve the argument length check by returning a useful error message. One thing I always try to keep in mind is to make the error message actionable. For example, here we could just say &amp;quot;Error: did not receive a single argument.&amp;quot;. However, it would be better to also add an action - &amp;quot;Error: did not receive a single argument. Please invoke cert-decoder as follows: &#x27;.&#x2F;cert-decoder &#x2F;path&#x2F;to&#x2F;cert&#x27;.&amp;quot;. Not only are we telling a user what went wrong, but we are also telling them how to fix it.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s update our test.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;should_error_if_not_given_a_single_argument&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; arrange
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args = Vec::new();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; act
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(args);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; assert
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;assert!(result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
    assert_eq!(
        result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(),
        format!(
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: did not receive a single argument, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;please invoke cert-decoder as follows: .&#x2F;cert-decoder &#x2F;path&#x2F;to&#x2F;cert.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
        )
    );
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;:memo: Note&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;result&#x2F;enum.Result.html#method.is_err&quot;&gt;result.err()&lt;&#x2F;a&gt; will return an &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;option&#x2F;enum.Option.html&quot;&gt;Option&lt;&#x2F;a&gt;. The &lt;code&gt;Option&lt;&#x2F;code&gt; will be &lt;code&gt;Some&lt;&#x2F;code&gt; if the value of the &lt;code&gt;Result&lt;&#x2F;code&gt; is &lt;code&gt;Err&lt;&#x2F;code&gt;. This &lt;code&gt;Some&lt;&#x2F;code&gt; will contain the same value &lt;code&gt;Err&lt;&#x2F;code&gt; contained. The &lt;code&gt;Option&lt;&#x2F;code&gt; will be &lt;code&gt;None&lt;&#x2F;code&gt; if the &lt;code&gt;Result&lt;&#x2F;code&gt; is &lt;code&gt;Ok&lt;&#x2F;code&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;In this case we know for certain the &lt;code&gt;Result&lt;&#x2F;code&gt;&#x27;s value is &lt;code&gt;Err&lt;&#x2F;code&gt; as we asserted it before with &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;result&#x2F;enum.Result.html#method.is_err&quot;&gt;is_err&lt;&#x2F;a&gt;. So the &lt;code&gt;Option&lt;&#x2F;code&gt; returned from &lt;code&gt;result.err()&lt;&#x2F;code&gt; will be &lt;code&gt;Some&lt;&#x2F;code&gt; and we can safely call &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;option&#x2F;enum.Option.html#method.unwrap&quot;&gt;unwrap&lt;&#x2F;a&gt; on that &lt;code&gt;Some&lt;&#x2F;code&gt; to get the value it contains. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This won&#x27;t compile because we are trying to compare two different types now. &lt;code&gt;result.err().unwrap()&lt;&#x2F;code&gt; will return &lt;code&gt;()&lt;&#x2F;code&gt; and we are trying to compare this to a string. So we need to update the return type of &lt;code&gt;execute&lt;&#x2F;code&gt;. We could also add the correct return value, the string we are asserting &lt;code&gt;execute&lt;&#x2F;code&gt; returns. But I like to do things in tiny changes so let&#x27;s just update the type first and return an empty string. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Vec&amp;lt;String&amp;gt;) -&amp;gt; Result&amp;lt;(), String&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(&amp;quot;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
    }
    Ok(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now if we run &lt;code&gt;cargo -q test&lt;&#x2F;code&gt; it will compile but the test will fail.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-plaintext&quot; data-lang=&quot;plaintext&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;➜ cargo -q test

running 1 test
F
failures:

---- test::should_error_if_not_given_a_single_argument stdout ----
thread &amp;#39;test::should_error_if_not_given_a_single_argument&amp;#39; panicked at &amp;#39;assertion failed: `(left == right)`
  left: `&amp;quot;&amp;quot;`,
 right: `&amp;quot;Error: did not receive a single argument, please invoke cert-decoder as follows: .&#x2F;cert-decoder &#x2F;path&#x2F;to&#x2F;cert&amp;quot;`&amp;#39;, src&#x2F;main.rs:27:9
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So let&#x27;s make some changes.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Vec&amp;lt;String&amp;gt;) -&amp;gt; Result&amp;lt;(), String&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; error = format!(
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: did not receive a single argument, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;please invoke cert-decoder as follows: .&#x2F;cert-decoder &#x2F;path&#x2F;to&#x2F;cert.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
        );
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(error);
    }
    Ok(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And re-run.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;running&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 1 test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result: ok. 1 passed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; failed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ignored; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; measured; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; filtered out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great! Our test is green and we have an argument length check with a nice error message. It won&#x27;t do anything if we try to run it though. To fix that, let&#x27;s update &lt;code&gt;main&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() -&amp;gt; Result&amp;lt;(), String&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args = std::env::args().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(args)
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Here we add a real call to get the args in &lt;code&gt;main&lt;&#x2F;code&gt;, &lt;code&gt;std::env::args().skip(1).collect()&lt;&#x2F;code&gt;. The name of the binary will be part of the args, that is why we skip one argument.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;:memo: Note&lt;&#x2F;strong&gt; &lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s breakdown the &lt;code&gt;std::env::args().skip(1).collect()&lt;&#x2F;code&gt;. If you understood it you can skip this note. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;std::env::args()&lt;&#x2F;code&gt; will return a value of type &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;stable&#x2F;std&#x2F;env&#x2F;struct.Args.html&quot;&gt;Args&lt;&#x2F;a&gt;. &lt;code&gt;Args&lt;&#x2F;code&gt; implements the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;iter&#x2F;trait.Iterator.html&quot;&gt;Iterator&lt;&#x2F;a&gt; trait, which means it has &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;iter&#x2F;trait.Iterator.html#method.skip&quot;&gt;skip&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;iter&#x2F;trait.Iterator.html#method.collect&quot;&gt;collect&lt;&#x2F;a&gt; methods. We skip one item, which is the binary name and collect the rest. Because we are using this as an argument to &lt;code&gt;execute&lt;&#x2F;code&gt;, &lt;code&gt;Rust&lt;&#x2F;code&gt; can infer its type which is &lt;code&gt;Vec&amp;lt;String&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Now we can run with no argument using &lt;code&gt;cargo run&lt;&#x2F;code&gt; and it will give an error.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; run
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Error: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: did not receive a single argument, please invoke cert-decoder as follows: .&#x2F;cert-decoder &#x2F;path&#x2F;to&#x2F;c
ert.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And if we pass an argument it will print nothing.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; run -- something

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Anything after the &lt;code&gt;--&lt;&#x2F;code&gt; will be passed to our program as arguments. We can check off the first item on our test list now.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Validate args&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&quot;fas fa-check&quot;&gt;&lt;&#x2F;i&gt; Only allow a single argument&lt;&#x2F;li&gt;
&lt;li&gt;☐ Argument is a path that exists&lt;&#x2F;li&gt;
&lt;li&gt;☐ Argument should be a single file &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;check-argument-is-a-path-that-exists&quot;&gt;Check argument is a path that exists&lt;&#x2F;h2&gt;
&lt;p&gt;First, a test.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;should_error_if_argument_is_not_a_path_which_exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; arrange
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args = vec![&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;does-not-exist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()];

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; act
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(args);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; assert
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;assert!(result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
    assert_eq!(
        result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(),
        &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: path given as argument does not exist, it must be a path to a certificate!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
    );
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As always, run the test to see it fail first. It will fail because the result will not be an error. Let&#x27;s make it return an error. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;std::path::Path;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Vec&amp;lt;String&amp;gt;) -&amp;gt; Result&amp;lt;(), String&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; error = format!(
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: did not receive a single argument, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;please invoke cert-decoder as follows: .&#x2F;cert-decoder &#x2F;path&#x2F;to&#x2F;cert.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
        );
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(error);
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; path = Path::new(&amp;amp;args[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]);
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;!path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: path given as argument does not exist, it must be a path to a certificate!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(),
        );
    }
    Ok(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now the test will pass. &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;path&#x2F;struct.Path.html&quot;&gt;Path&lt;&#x2F;a&gt; contains many operations for interacting with filesystems. The call to &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;path&#x2F;struct.Path.html#method.exists&quot;&gt;exists&lt;&#x2F;a&gt; above will check the real filesystem to see if the path we give as an argument exists. This is generally not something you want to do in your tests. &lt;&#x2F;p&gt;
&lt;p&gt;Before we factor out this IO, let&#x27;s tick this item off on our test list as it is working.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Validate args&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&quot;fas fa-check&quot;&gt;&lt;&#x2F;i&gt; Only allow a single argument&lt;&#x2F;li&gt;
&lt;li&gt;&lt;i class=&quot;fas fa-check&quot;&gt;&lt;&#x2F;i&gt; Argument is a path that exists&lt;&#x2F;li&gt;
&lt;li&gt;☐ Argument should be a single file &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;The code up to this point can be seen &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wayofthepie&#x2F;cert-decoder&#x2F;tree&#x2F;b5c242bb92eb125117554d2692f5bc8c93082ca3&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;factor-out-io&quot;&gt;Factor out IO&lt;&#x2F;h2&gt;
&lt;p&gt;Almost any code you write is going to do some kind of IO, e.g. network calls, file reads. Normally we don&#x27;t want this to happen in a test. Beyond just keeping IO out of tests, making it clearer where IO does happen is very useful for readability and refactoring. Especially as a system grows.&lt;&#x2F;p&gt;
&lt;p&gt;Right now what we want to do is make our code testable under different scenarios without touching the real filesystem. There are a few ways to do this, but I generally use traits and have a real and fake implementation of the trait. Let&#x27;s define a trait that has an &lt;code&gt;exists&lt;&#x2F;code&gt; method, just like &lt;code&gt;Path&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;PathValidator {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It took me a while to come up with a name I was somewhat happy with for this trait. Naming is hard. Now that we have a trait, let&#x27;s implement it for the real case.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;CertValidator;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;PathValidator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;CertValidator {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        Path::new(path).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now our tests need a version of this also.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(test)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;test {

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;::{execute, PathValidator};

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;FakeValidator {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;PathValidator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;FakeValidator {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, _: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.is_path
        }
    }   
    ...
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finally, we need to refactor the &lt;code&gt;execute&lt;&#x2F;code&gt; function to take something that implements &lt;code&gt;PathValidator&lt;&#x2F;code&gt; as a parameter and update our tests to reflect this. The change as a whole is as follows, with some notes in comments.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;std::path::Path;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;PathValidator {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;CertValidator;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;PathValidator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;CertValidator {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        Path::new(path).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
    }
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Here we change the signature of execute to also take a value of type `impl PathValidator`, 
&#x2F;&#x2F; see the note after this code block for more information. 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;validator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: impl PathValidator, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Vec&amp;lt;String&amp;gt;) -&amp;gt; Result&amp;lt;(), String&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; error = format!(
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: did not receive a single argument, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;please invoke cert-decoder as follows: .&#x2F;cert-decoder &#x2F;path&#x2F;to&#x2F;cert.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
        );
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(error);
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; path = &amp;amp;args[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Instead of calling Path&amp;#39;s exists method, we call exists on our 
    &#x2F;&#x2F; PathValidator implementation.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;!validator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(path) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: path given as argument does not exist, it must be a path to a certificate!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(),
        );
    }
    Ok(())
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() -&amp;gt; Result&amp;lt;(), String&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args = std::env::args().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;skip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Here we create our real PathValidator implementation,
    &#x2F;&#x2F; CertValidator, which touches the filesystem.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; validator = CertValidator;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(validator, args)
}

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(test)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;test {

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;::{execute, PathValidator};

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;FakeValidator {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;PathValidator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;FakeValidator {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, _: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.is_path
        }
    }

    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;should_error_if_not_given_a_single_argument&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; arrange
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args = Vec::new();

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We construct a FakeValidator that says all paths exist.
        &#x2F;&#x2F; It will never be called in this test, however.
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; validator = FakeValidator { is_path: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;};

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; act
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(validator, args);

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; assert
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;assert!(result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
        assert_eq!(
            result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(),
            format!(
                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: did not receive a single argument, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;please invoke cert-decoder as follows: .&#x2F;cert-decoder &#x2F;path&#x2F;to&#x2F;cert.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
            )
        );
    }

    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;should_error_if_argument_is_not_a_path_which_exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; arrange
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args = vec![&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;does-not-exist&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()];

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; We construct a validator that says no path exists.
        &#x2F;&#x2F; This will cause our test to fail and return the error we want,
        &#x2F;&#x2F; mimicing a path which does not exist without touching the real
        &#x2F;&#x2F; filesystem.
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; validator = FakeValidator { is_path: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;};

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; act
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(validator, args);

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; assert
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;assert!(result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
        assert_eq!(
            result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(),
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: path given as argument does not exist, it must be a path to a certificate!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
        );
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;:memo: Note&lt;&#x2F;p&gt;
&lt;p&gt;The type of &lt;code&gt;validator&lt;&#x2F;code&gt; in the &lt;code&gt;execute&lt;&#x2F;code&gt; function is &lt;code&gt;impl PathValidator&lt;&#x2F;code&gt;. This simply says &lt;code&gt;validator&lt;&#x2F;code&gt; can be a value of any type which implements &lt;code&gt;PathValidator&lt;&#x2F;code&gt;. You can read more about this in the &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;title-page.html&quot;&gt;Rust book&lt;&#x2F;a&gt; in the section on &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;book&#x2F;ch10-02-traits.html?highlight=impl,trait#traits-as-parameters&quot;&gt;Traits as Parameters&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Run the tests again and they should still be green! If you run with &lt;code&gt;cargo run&lt;&#x2F;code&gt; as we did earlier, it should still work as expected. The code up to this point can be seen &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wayofthepie&#x2F;cert-decoder&#x2F;tree&#x2F;19fee59da8d1e4625e2693c1e388be1912e2d9ee&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;check-argument-is-a-file&quot;&gt;Check argument is a file&lt;&#x2F;h2&gt;
&lt;p&gt;What&#x27;s left on our test list?&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Validate args&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&quot;fas fa-check&quot;&gt;&lt;&#x2F;i&gt; Only allow a single argument&lt;&#x2F;li&gt;
&lt;li&gt;&lt;i class=&quot;fas fa-check&quot;&gt;&lt;&#x2F;i&gt; Argument is a path that exists&lt;&#x2F;li&gt;
&lt;li&gt;☐ Argument should be a single file &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Right now the argument we pass can be several file types other than a regular file, for example, a directory. As we only validate if the given path exists, not what that path points to. So let&#x27;s validate it is also a file. First, a test.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cfg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(test)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mod &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;test {

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;::{execute, PathValidator};

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;FakeValidator {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;is_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;PathValidator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;FakeValidator {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, _: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.is_path
        }

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;is_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, _: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.is_file
        }
    }

    ... 

    #[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;should_error_if_argument_is_not_a_regular_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; arrange
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args = vec![&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;not-a-regular-file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()];
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; validator = FakeValidator {
            is_path: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
            is_file: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
        };

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; act
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(validator, args);

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; assert
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;assert!(result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
        assert_eq!(
            result.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(),
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: path given is not a regular file, please update to point to a certificate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
        );
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This won&#x27;t compile as there is no &lt;code&gt;is_file&lt;&#x2F;code&gt; method on our &lt;code&gt;PathValidator&lt;&#x2F;code&gt; trait. Here I&#x27;ve also updated the &lt;code&gt;FakeValidator&lt;&#x2F;code&gt; in the other test, setting &lt;code&gt;is_file&lt;&#x2F;code&gt; to &lt;code&gt;false&lt;&#x2F;code&gt;. Let&#x27;s update that and implement the real version next.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;PathValidator {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;is_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;CertValidator;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;PathValidator &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;CertValidator {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        Path::new(path).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;is_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        Path::new(path).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we have a new &lt;code&gt;is_file&lt;&#x2F;code&gt; method. If we re-run the test it should fail as we are not returning an error. You can run a single test with &lt;code&gt;cargo test&lt;&#x2F;code&gt; by passing its name, or a string that is contained in its name. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test should_error_if_argument_is_not_a_regular_file

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;running&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 1 test
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;F
failures:

----&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test::should_error_if_argument_is_not_a_regular_file stdout ----
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;thread &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test::should_error_if_argument_is_not_a_regular_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39; panicked at &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;assertion failed: result.is_err()&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;, src
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;main.rs:122:9
note:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; run with `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;RUST_BACKTRACE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;` environment variable to display a backtrace


&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;failures:
    test::should_error_if_argument_is_not_a_regular_file

test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result: FAILED. 0 passed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; failed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ignored; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; measured; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; filtered out

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;error:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test failed, to rerun pass &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--bin cert-decode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s make it return an error if the path given is not a regular file.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;validator&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: impl PathValidator, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Vec&amp;lt;String&amp;gt;) -&amp;gt; Result&amp;lt;(), String&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; error = format!(
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: did not receive a single argument, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;please invoke cert-decoder as follows: .&#x2F;cert-decoder &#x2F;path&#x2F;to&#x2F;cert.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
        );
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(error);
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; path = &amp;amp;args[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;!validator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(path) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: path given as argument does not exist, it must be a path to a certificate!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(),
        );
    }
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;!validator.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(path) {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(
            &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error: path given is not a regular file, please update to point to a certificate.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_owned&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(),
        );
    }
    Ok(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Re-run and all tests should be green.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;➜&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; cargo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -q&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; test

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;running&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; 3 tests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;...
test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result: ok. 3 passed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; failed; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ignored; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; measured; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; filtered out

&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great! The code up to this point can be seen &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wayofthepie&#x2F;cert-decoder&#x2F;tree&#x2F;a992dd190de61a922cec95233e0fdbd43c500a8f&quot;&gt;here&lt;&#x2F;a&gt;. We can now tick this off on the test list.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;&lt;strong&gt;Validate args&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;i class=&quot;fas fa-check&quot;&gt;&lt;&#x2F;i&gt; Only allow a single argument&lt;&#x2F;li&gt;
&lt;li&gt;&lt;i class=&quot;fas fa-check&quot;&gt;&lt;&#x2F;i&gt; Argument is a path that exists&lt;&#x2F;li&gt;
&lt;li&gt;&lt;i class=&quot;fas fa-check&quot;&gt;&lt;&#x2F;i&gt; Argument should be a single file &lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;another-small-refactor&quot;&gt;Another small refactor&lt;&#x2F;h2&gt;
&lt;p&gt;We can refactor this a bit. If we have a regular file then it must be a path that exists. This means we can get rid of the exists check and its test entirely. Here is a diff of this change.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;diff --git a&#x2F;src&#x2F;main.rs b&#x2F;src&#x2F;main.rs
index 171545b..2ec2d92 100644
--- a&#x2F;src&#x2F;main.rs
+++ b&#x2F;src&#x2F;main.rs
@@ -1,17 +1,12 @@
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;use std::path::Path;
 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; trait PathValidator {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-    fn exists(&amp;amp;self, path: &amp;amp;str) -&amp;gt; bool;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     fn is_file(&amp;amp;self, path: &amp;amp;str) -&amp;gt; bool;
 }
 
 struct CertValidator;
 
 impl PathValidator for CertValidator {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-    fn exists(&amp;amp;self, path: &amp;amp;str) -&amp;gt; bool {
-        Path::new(path).exists()
-    }
-
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     fn is_file(&amp;amp;self, path: &amp;amp;str) -&amp;gt; bool {
         Path::new(path).is_file()
     }
@@ -27,12 +22,6 @@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fn execute(validator: impl PathValidator, args: Vec&amp;lt;String&amp;gt;) -&amp;gt; Result&amp;lt;(), Strin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         return Err(error);
     }
     let path = &amp;amp;args[0];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-    if !validator.exists(path) {
-        return Err(
-            &amp;quot;Error: path given as argument does not exist, it must be a path to a certificate!&amp;quot;
-                .to_owned(),
-        );
-    }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     if !validator.is_file(path) {
         return Err(
             &amp;quot;Error: path given is not a regular file, please update to point to a certificate.&amp;quot;
@@ -54,15 +43,10 @@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mod test {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     use crate::{execute, PathValidator};
 
     struct FakeValidator {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        is_path: bool,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         is_file: bool,
     }
 
     impl PathValidator for FakeValidator {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        fn exists(&amp;amp;self, _: &amp;amp;str) -&amp;gt; bool {
-            self.is_path
-        }
-
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         fn is_file(&amp;amp;self, _: &amp;amp;str) -&amp;gt; bool {
             self.is_file
         }
@@ -72,10 +56,7 @@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mod test {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     fn should_error_if_not_given_a_single_argument() {
         &#x2F;&#x2F; arrange
         let args = Vec::new();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        let validator = FakeValidator {
-            is_path: true,
-            is_file: false,
-        };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        let validator = FakeValidator { is_file: false };
 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         &#x2F;&#x2F; act
         let result = execute(validator, args);
@@ -92,34 +73,11 @@ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;mod test {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         );
     }
 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-    #[test]
-    fn should_error_if_argument_is_not_a_path_which_exists() {
-        &#x2F;&#x2F; arrange
-        let args = vec![&amp;quot;does-not-exist&amp;quot;.to_owned()];
-        let validator = FakeValidator {
-            is_path: false,
-            is_file: false,
-        };
-
-        &#x2F;&#x2F; act
-        let result = execute(validator, args);
-
-        &#x2F;&#x2F; assert
-        assert!(result.is_err());
-        assert_eq!(
-            result.err().unwrap(),
-            &amp;quot;Error: path given as argument does not exist, it must be a path to a certificate!&amp;quot;
-        );
-    }
-
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     #[test]
     fn should_error_if_argument_is_not_a_regular_file() {
         &#x2F;&#x2F; arrange
         let args = vec![&amp;quot;not-a-regular-file&amp;quot;.to_owned()];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-        let validator = FakeValidator {
-            is_path: true,
-            is_file: false,
-        };
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+        let validator = FakeValidator { is_file: false };
 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;         &#x2F;&#x2F; act
         let result = execute(validator, args);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The code up to this point can be seen &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wayofthepie&#x2F;cert-decoder&#x2F;tree&#x2F;5c79d66dc65f42ad3750d776f1fafa8994355fb8&quot;&gt;here&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;in-the-next-post&quot;&gt;In the next post&lt;&#x2F;h1&gt;
&lt;p&gt;In the next post, we&#x27;ll look at reading information out of the certificate using the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;x509-parser&#x2F;0.7.0&#x2F;x509_parser&#x2F;&quot;&gt;x509_parser&lt;&#x2F;a&gt; crate. We&#x27;ll also switch to using &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;structopt&#x2F;0.3.14&#x2F;structopt&#x2F;&quot;&gt;structopt&lt;&#x2F;a&gt; for argument parsing. I didn&#x27;t use &lt;code&gt;structopt&lt;&#x2F;code&gt; here as I wanted to keep things simple and mainly focus on the workflow, show how we can evolve functionality in small testable steps. I&#x27;m hoping the value of this workflow will be more apparent as we add more functionality to this cli, and things get more complex.&lt;&#x2F;p&gt;
&lt;p&gt;There are also a couple of things implemented here which you would not see in general Rust code. For example, returning a &lt;code&gt;String&lt;&#x2F;code&gt; as the &lt;code&gt;Err&lt;&#x2F;code&gt; value of a &lt;code&gt;Result&lt;&#x2F;code&gt;. This is ok, we will refactor them as we go. It&#x27;s better to start with something small, get it working, then refactor than to try to make it perfect right away.&lt;&#x2F;p&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;pem&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;1&lt;&#x2F;sup&gt;
&lt;p&gt;&lt;code&gt;PEM&lt;&#x2F;code&gt; encoding - see &lt;a href=&quot;https:&#x2F;&#x2F;tools.ietf.org&#x2F;html&#x2F;rfc7468#section-2&quot;&gt;Section 2&lt;&#x2F;a&gt; of &lt;a href=&quot;https:&#x2F;&#x2F;tools.ietf.org&#x2F;html&#x2F;rfc7468&quot;&gt;RFC 7468&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;unitreturn&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;3&lt;&#x2F;sup&gt;
&lt;p&gt;This is not entirely accurate, if you do not specify a return type it will implicitly be &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;primitive.unit.html&quot;&gt;()&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;, the &lt;em&gt;unit&lt;&#x2F;em&gt; type.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
&lt;div class=&quot;footnote-definition&quot; id=&quot;cargoq&quot;&gt;&lt;sup class=&quot;footnote-definition-label&quot;&gt;2&lt;&#x2F;sup&gt;
&lt;p&gt;The &lt;code&gt;-q&lt;&#x2F;code&gt; in &lt;code&gt;cargo -q test&lt;&#x2F;code&gt; is short for &lt;code&gt;--quiet&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;div&gt;
</content>
	</entry>
</feed>
